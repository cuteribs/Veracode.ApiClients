// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.IdentityApi
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Veracode Identity API Documentation
    ///
    /// Use one of the following base URLs depending on the region for your
    /// account:
    /// * https://api.veracode.com/ - Veracode US Region (default)
    /// * https://api.veracode.eu/ - Veracode European Region
    /// * https://api.veracode.us/ - Veracode US Federal Region
    /// </summary>
    public partial interface IIdentityApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the IGetUserUsingGET.
        /// </summary>
        IGetUserUsingGET GetUserUsingGET { get; }

        /// <summary>
        /// Gets the IUpdateUserUsingPUT.
        /// </summary>
        IUpdateUserUsingPUT UpdateUserUsingPUT { get; }

        /// <summary>
        /// Get API credentials for self.
        /// </summary>
        /// <remarks>
        /// Get API credentials for self based on the user principal.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfApiCredentialsWithoutSecret>> GetUserApiCredsUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate API credentials.
        /// </summary>
        /// <remarks>
        /// Generate API credentials.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfApiCredentials>> GenerateApiCredsUsingPOSTWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete API credentials for self.
        /// </summary>
        /// <remarks>
        /// Delete API credentials based on the user principal.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RevokeUserApiCredsUsingDELETEWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get specific API credentials.
        /// </summary>
        /// <remarks>
        /// Get specific API credentials based on path parameters.
        /// </remarks>
        /// <param name='apiCredsId'>
        /// The API ID for the client.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfApiCredentialsWithoutSecret>> GetApiCredsUsingGETWithHttpMessagesAsync(string apiCredsId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete specific API credentials.
        /// </summary>
        /// <remarks>
        /// Delete specific API credentials based on path parameters.
        /// </remarks>
        /// <param name='apiCredsId'>
        /// The API ID for the client.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RevokeApiCredsUsingDELETEWithHttpMessagesAsync(string apiCredsId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get specific API credentials by userId.
        /// </summary>
        /// <remarks>
        /// As an Administrator user, get specific API credentials based on
        /// userId.
        /// </remarks>
        /// <param name='userId'>
        /// The user ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetApiCredsByUserIdWithHttpMessagesAsync(object userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate API credentials by userId
        /// </summary>
        /// <remarks>
        /// As an Administrator user, generate API credentials based on userId
        /// </remarks>
        /// <param name='userId'>
        /// The user ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GenerateApiCredsByUserIdWithHttpMessagesAsync(object userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete specific API credentials by userId.
        /// </summary>
        /// <remarks>
        /// As an Administrator user, delete specific API credentials based on
        /// userId.
        /// </remarks>
        /// <param name='userId'>
        /// The user ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RevokeApiCredsByUserIdWithHttpMessagesAsync(object userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of business units.
        /// </summary>
        /// <remarks>
        /// Gets a list of business units based on the user principal.
        /// </remarks>
        /// <param name='buName'>
        /// The business unit name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourcesOfResourceOfBusinessUnit>> GetBusinessUnitsUsingGETWithHttpMessagesAsync(string buName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a business unit.
        /// </summary>
        /// <remarks>
        /// Creates a business unit and returns the record with the ID.
        /// </remarks>
        /// <param name='businessUnit'>
        /// businessUnit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfBusinessUnitResource>> CreateBusinessUnitUsingPOSTWithHttpMessagesAsync(BusinessUnit businessUnit, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specific business unit.
        /// </summary>
        /// <remarks>
        /// Get the specific business unit details for the ID provided as a
        /// path variable.
        /// </remarks>
        /// <param name='businessUnitId'>
        /// The business unit ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfBusinessUnitResource>> GetBusinessUnitUsingGETWithHttpMessagesAsync(string businessUnitId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a business unit.
        /// </summary>
        /// <remarks>
        /// Updates the business unit for the ID provided as a path variable.
        /// Parameters excluded from the request are set to null (if allowed in
        /// the database) unless partial is set to true.
        /// </remarks>
        /// <param name='businessUnitId'>
        /// The business unit ID.
        /// </param>
        /// <param name='businessUnit'>
        /// businessUnit
        /// </param>
        /// <param name='partial'>
        /// Flag to indicate if this is a partial update.
        /// </param>
        /// <param name='incremental'>
        /// Flag to indicate if this is an incremental update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfBusinessUnitResource>> UpdateBusinessUnitUsingPUTWithHttpMessagesAsync(string businessUnitId, BusinessUnit businessUnit, bool? partial = default(bool?), bool? incremental = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a specific business unit.
        /// </summary>
        /// <remarks>
        /// Deletes the specific business unit for the ID provided as a path
        /// variable.
        /// </remarks>
        /// <param name='businessUnitId'>
        /// The business unit ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteBusinessUnitUsingDELETEWithHttpMessagesAsync(string businessUnitId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of teams for an organization.
        /// </summary>
        /// <remarks>
        /// Gets a list of all the teams in the database for the specified
        /// organization.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourcesOfResourceOfTeamSummary>> GetTeamsUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a team.
        /// </summary>
        /// <remarks>
        /// Creates a team and returns the details and ID.
        /// </remarks>
        /// <param name='team'>
        /// team
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfTeamResource>> CreateTeamUsingPOSTWithHttpMessagesAsync(Team team, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single team.
        /// </summary>
        /// <remarks>
        /// Gets details of the specific team ID provided as a path variable.
        /// </remarks>
        /// <param name='teamId'>
        /// The team ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfTeamResource>> GetTeamUsingGETWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a single team.
        /// </summary>
        /// <remarks>
        /// Updates a specific team and sets nulls to fields not in the request
        /// (if the database allows it) unless partial is set to true.
        /// </remarks>
        /// <param name='teamId'>
        /// The team ID.
        /// </param>
        /// <param name='team'>
        /// team
        /// </param>
        /// <param name='partial'>
        /// Flag to indicate if this is a partial update.
        /// </param>
        /// <param name='incremental'>
        /// Flag to indicate if this is an incremental update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfTeamResource>> UpdateTeamUsingPUTWithHttpMessagesAsync(string teamId, Team team, bool? partial = default(bool?), bool? incremental = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a single team.
        /// </summary>
        /// <remarks>
        /// Deletes a specific team provided as a path variable.
        /// </remarks>
        /// <param name='teamId'>
        /// The team ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTeamUsingDELETEWithHttpMessagesAsync(string teamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of users for an organization.
        /// </summary>
        /// <remarks>
        /// Gets a list of the organization users for external users. Internal
        /// users can specify a specific organization.
        /// </remarks>
        /// <param name='userName'>
        /// The usernames to filter out from the results.
        /// </param>
        /// <param name='orgName'>
        /// The organization name to search under.
        /// </param>
        /// <param name='orgId'>
        /// The organization ID to search under.
        /// </param>
        /// <param name='deleted'>
        /// Flag to indicate if deleted records are included in the results.
        /// </param>
        /// <param name='inactive'>
        /// Flag to indicate if inactive users are included in the results.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourcesOfResourceOfUserSummary>> GetUsersUsingGETWithHttpMessagesAsync(IList<string> userName = default(IList<string>), string orgName = default(string), string orgId = default(string), bool? deleted = false, bool? inactive = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a user.
        /// </summary>
        /// <remarks>
        /// Creates a user and returns details with the ID.
        /// </remarks>
        /// <param name='generateApiCreds'>
        /// Set to true to indicate that API credentials must be generated for
        /// the user.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfUserResource>> CreateUserWithHttpMessagesAsync(object generateApiCreds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get details of the current user.
        /// </summary>
        /// <remarks>
        /// Gets details of the current user using the details from the
        /// principal user.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfUserResource>> GetUserUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the current user.
        /// </summary>
        /// <remarks>
        /// Updates the current user (from the principal user) and sets nulls
        /// to fields not in the request (if the database allows it) unless
        /// partial is set to true.
        /// </remarks>
        /// <param name='user'>
        /// user
        /// </param>
        /// <param name='partial'>
        /// Flag to indicate if this is a partial update.
        /// </param>
        /// <param name='incremental'>
        /// Flag to indicate if this is an incremental update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceOfUserResource>> UpdateUserUsingPUTWithHttpMessagesAsync(User user, bool? partial = default(bool?), bool? incremental = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a single user.
        /// </summary>
        /// <remarks>
        /// Deletes a specific user provided as a path variable.
        /// </remarks>
        /// <param name='userId'>
        /// The user ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserUsingDELETEWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of users for an organization by search and filter.
        /// </summary>
        /// <remarks>
        /// Get a list of users in an organization based on search terms and
        /// filters. Internal users can specify an organization name.
        /// </remarks>
        /// <param name='apiId'>
        /// Search for users by Veracode API ID.
        /// </param>
        /// <param name='loginEnabled'>
        /// Set to true to filter users by login enabled status: enabled or
        /// disabled
        /// </param>
        /// <param name='loginStatus'>
        /// Set to true to filter users by status of their user account:
        /// active, failed, locked, or never
        /// </param>
        /// <param name='orgId'>
        /// ID of an organization in which to search for users.
        /// </param>
        /// <param name='orgName'>
        /// Name of an organization in which to search for users. Available to
        /// internal users only.
        /// </param>
        /// <param name='roleId'>
        /// Filter users by ID of the assigned user role.
        /// </param>
        /// <param name='samlUser'>
        /// Set to true to filter by SAML users.
        /// </param>
        /// <param name='searchTerm'>
        /// Keyword to search for users using the username, first name, last
        /// name, and email address fields.
        /// </param>
        /// <param name='teamId'>
        /// Filter users by the ID of the team of which they are a member.
        /// </param>
        /// <param name='userType'>
        /// Filter users by user account type: api, for API service account, or
        /// user, for human user account.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourcesOfResourceOfUser>> GetUsersBySearchUsingGETWithHttpMessagesAsync(string apiId = default(string), bool? loginEnabled = default(bool?), string loginStatus = default(string), string orgId = default(string), string orgName = default(string), string roleId = default(string), bool? samlUser = default(bool?), string searchTerm = default(string), string teamId = default(string), string userType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the list of roles for an organization.
        /// </summary>
        /// <remarks>
        /// Get a list of all user roles for an organization.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourcesOfResourceOfRole>> GetRolesUsingGETWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
