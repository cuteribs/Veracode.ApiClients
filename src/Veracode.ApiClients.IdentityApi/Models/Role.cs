// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.IdentityApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single role.
    /// </summary>
    public partial class Role
    {
        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        public Role()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        /// <param name="assignedToProxyUsers">Flag indicating if this role can
        /// be assigned to proxy users.</param>
        /// <param name="isInternal">Flag indicating if this role is internal
        /// or external.</param>
        /// <param name="requiresToken">Flag indicating if this role requires a
        /// token to log in.</param>
        /// <param name="roleDescription">The short description for this
        /// role.</param>
        /// <param name="roleId">The role ID in the Veracode Identity
        /// API.</param>
        /// <param name="roleLegacyId">The role ID in the Veracode
        /// database.</param>
        /// <param name="roleName">The role name.</param>
        /// <param name="teamAdminManageable">Flag indicating if a team admin
        /// can manage this role.</param>
        public Role(bool? assignedToProxyUsers = default(bool?), bool? isInternal = default(bool?), IList<Permission> permissions = default(IList<Permission>), bool? requiresToken = default(bool?), string roleDescription = default(string), string roleId = default(string), int? roleLegacyId = default(int?), string roleName = default(string), bool? teamAdminManageable = default(bool?))
        {
            AssignedToProxyUsers = assignedToProxyUsers;
            IsInternal = isInternal;
            Permissions = permissions;
            RequiresToken = requiresToken;
            RoleDescription = roleDescription;
            RoleId = roleId;
            RoleLegacyId = roleLegacyId;
            RoleName = roleName;
            TeamAdminManageable = teamAdminManageable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets flag indicating if this role can be assigned to proxy
        /// users.
        /// </summary>
        [JsonProperty(PropertyName = "assigned_to_proxy_users")]
        public bool? AssignedToProxyUsers { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this role is internal or external.
        /// </summary>
        [JsonProperty(PropertyName = "is_internal")]
        public bool? IsInternal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public IList<Permission> Permissions { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this role requires a token to log
        /// in.
        /// </summary>
        [JsonProperty(PropertyName = "requires_token")]
        public bool? RequiresToken { get; set; }

        /// <summary>
        /// Gets or sets the short description for this role.
        /// </summary>
        [JsonProperty(PropertyName = "role_description")]
        public string RoleDescription { get; set; }

        /// <summary>
        /// Gets or sets the role ID in the Veracode Identity API.
        /// </summary>
        [JsonProperty(PropertyName = "role_id")]
        public string RoleId { get; set; }

        /// <summary>
        /// Gets or sets the role ID in the Veracode database.
        /// </summary>
        [JsonProperty(PropertyName = "role_legacy_id")]
        public int? RoleLegacyId { get; set; }

        /// <summary>
        /// Gets or sets the role name.
        /// </summary>
        [JsonProperty(PropertyName = "role_name")]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if a team admin can manage this role.
        /// </summary>
        [JsonProperty(PropertyName = "team_admin_manageable")]
        public bool? TeamAdminManageable { get; set; }

    }
}
