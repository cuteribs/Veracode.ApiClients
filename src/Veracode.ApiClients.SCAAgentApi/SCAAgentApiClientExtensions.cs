// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.SCAAgentApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SCAAgentApiClient.
    /// </summary>
    public static partial class SCAAgentApiClientExtensions
    {
            /// <summary>
            /// AuditEvents for the organization.
            /// </summary>
            /// <remarks>
            /// Get audit events for your organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateGte'>
            /// Filter by events occurring on or after the specified date.
            /// </param>
            /// <param name='group'>
            /// Filter by event group.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='type'>
            /// Filter by event type.
            /// </param>
            public static PagedResourcesAuditEvent GetAuditUsingGET(this ISCAAgentApiClient operations, System.DateTime? dateGte = default(System.DateTime?), string group = default(string), int? page = default(int?), int? size = default(int?), string type = default(string))
            {
                return operations.GetAuditUsingGETAsync(dateGte, group, page, size, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// AuditEvents for the organization.
            /// </summary>
            /// <remarks>
            /// Get audit events for your organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dateGte'>
            /// Filter by events occurring on or after the specified date.
            /// </param>
            /// <param name='group'>
            /// Filter by event group.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='type'>
            /// Filter by event type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesAuditEvent> GetAuditUsingGETAsync(this ISCAAgentApiClient operations, System.DateTime? dateGte = default(System.DateTime?), string group = default(string), int? page = default(int?), int? size = default(int?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuditUsingGETWithHttpMessagesAsync(dateGte, group, page, size, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getIssue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Issue ID.
            /// </param>
            public static IssueDetailed GetIssueUsingGET(this ISCAAgentApiClient operations, System.Guid id)
            {
                return operations.GetIssueUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getIssue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Issue ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssueDetailed> GetIssueUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIssueUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getLibrary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Library instance reference ID. &lt;br/&gt; ID values have this format:
            /// coordinateType:coordinate1:coordinate2:version:platform &lt;br/&gt;
            /// Example: maven:net.minidev:json-smart:1.3.1:
            /// </param>
            public static LibraryDetailed GetLibraryUsingGET(this ISCAAgentApiClient operations, string id)
            {
                return operations.GetLibraryUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getLibrary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Library instance reference ID. &lt;br/&gt; ID values have this format:
            /// coordinateType:coordinate1:coordinate2:version:platform &lt;br/&gt;
            /// Example: maven:net.minidev:json-smart:1.3.1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LibraryDetailed> GetLibraryUsingGETAsync(this ISCAAgentApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibraryUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getLicense
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// License ID.
            /// </param>
            public static LicenseDetailed GetLicenseUsingGET(this ISCAAgentApiClient operations, string id)
            {
                return operations.GetLicenseUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getLicense
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// License ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LicenseDetailed> GetLicenseUsingGETAsync(this ISCAAgentApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLicenseUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getComponentActivity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Library instance reference ID. &lt;br/&gt; ID values have this format:
            /// coordinateType:coordinate1:coordinate2:version:platform &lt;br/&gt;
            /// Example: maven:net.minidev:json-smart:1.3.1:
            /// </param>
            public static ComponentMetricsModel GetComponentActivityUsingGET(this ISCAAgentApiClient operations, string id)
            {
                return operations.GetComponentActivityUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getComponentActivity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Library instance reference ID. &lt;br/&gt; ID values have this format:
            /// coordinateType:coordinate1:coordinate2:version:platform &lt;br/&gt;
            /// Example: maven:net.minidev:json-smart:1.3.1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ComponentMetricsModel> GetComponentActivityUsingGETAsync(this ISCAAgentApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentActivityUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getScan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Scan ID.
            /// </param>
            public static Scan GetScanUsingGET(this ISCAAgentApiClient operations, System.Guid id)
            {
                return operations.GetScanUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getScan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Scan ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scan> GetScanUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScanUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getTeams
            /// </summary>
            /// <remarks>
            /// Get all teams for an account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Filter by team name.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// name ascending.
            /// </param>
            public static ResourcesTeam GetTeamsUsingGET(this ISCAAgentApiClient operations, string name = default(string), int? page = default(int?), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetTeamsUsingGETAsync(name, page, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getTeams
            /// </summary>
            /// <remarks>
            /// Get all teams for an account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Filter by team name.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// name ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcesTeam> GetTeamsUsingGETAsync(this ISCAAgentApiClient operations, string name = default(string), int? page = default(int?), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamsUsingGETWithHttpMessagesAsync(name, page, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getTeam
            /// </summary>
            /// <remarks>
            /// Get team information with the given team id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Team ID.
            /// </param>
            public static Team GetTeamUsingGET(this ISCAAgentApiClient operations, string id)
            {
                return operations.GetTeamUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getTeam
            /// </summary>
            /// <remarks>
            /// Get team information with the given team id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Team ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Team> GetTeamUsingGETAsync(this ISCAAgentApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getVulnerability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Vulnerability ID.
            /// </param>
            public static VulnerabilityDetailed GetVulnerabilityUsingGET(this ISCAAgentApiClient operations, string id)
            {
                return operations.GetVulnerabilityUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getVulnerability
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Vulnerability ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityDetailed> GetVulnerabilityUsingGETAsync(this ISCAAgentApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVulnerabilityUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaces
            /// </summary>
            /// <remarks>
            /// Get visible workspaces. Workspace visibility depends on workspace
            /// membership and user permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterlibrary'>
            /// The library name filter.
            /// </param>
            /// <param name='filterlicense'>
            /// The license name filter.
            /// </param>
            /// <param name='filterproject'>
            /// The project name filter.
            /// </param>
            /// <param name='filtervulnerability'>
            /// The vulnerability title filter.
            /// </param>
            /// <param name='filterworkspace'>
            /// The workspace name filter.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// ascending.
            /// </param>
            public static PagedResourcesWorkspace GetWorkspacesUsingGET(this ISCAAgentApiClient operations, IList<string> filterlibrary = default(IList<string>), IList<string> filterlicense = default(IList<string>), IList<string> filterproject = default(IList<string>), IList<string> filtervulnerability = default(IList<string>), IList<string> filterworkspace = default(IList<string>), int? page = default(int?), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetWorkspacesUsingGETAsync(filterlibrary, filterlicense, filterproject, filtervulnerability, filterworkspace, page, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaces
            /// </summary>
            /// <remarks>
            /// Get visible workspaces. Workspace visibility depends on workspace
            /// membership and user permissions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filterlibrary'>
            /// The library name filter.
            /// </param>
            /// <param name='filterlicense'>
            /// The license name filter.
            /// </param>
            /// <param name='filterproject'>
            /// The project name filter.
            /// </param>
            /// <param name='filtervulnerability'>
            /// The vulnerability title filter.
            /// </param>
            /// <param name='filterworkspace'>
            /// The workspace name filter.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesWorkspace> GetWorkspacesUsingGETAsync(this ISCAAgentApiClient operations, IList<string> filterlibrary = default(IList<string>), IList<string> filterlicense = default(IList<string>), IList<string> filterproject = default(IList<string>), IList<string> filtervulnerability = default(IList<string>), IList<string> filterworkspace = default(IList<string>), int? page = default(int?), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspacesUsingGETWithHttpMessagesAsync(filterlibrary, filterlicense, filterproject, filtervulnerability, filterworkspace, page, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createWorkspace
            /// </summary>
            /// <remarks>
            /// Create a workspace using the workspace TeamInputModel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputModel'>
            /// Team model containing the team name, description, and memberships.
            /// </param>
            public static ResponseEntity CreateWorkspaceUsingPOST(this ISCAAgentApiClient operations, CreateWorkspaceModel inputModel)
            {
                return operations.CreateWorkspaceUsingPOSTAsync(inputModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createWorkspace
            /// </summary>
            /// <remarks>
            /// Create a workspace using the workspace TeamInputModel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inputModel'>
            /// Team model containing the team name, description, and memberships.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseEntity> CreateWorkspaceUsingPOSTAsync(this ISCAAgentApiClient operations, CreateWorkspaceModel inputModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWorkspaceUsingPOSTWithHttpMessagesAsync(inputModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspace
            /// </summary>
            /// <remarks>
            /// Get single workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            public static Workspace GetWorkspaceUsingGET(this ISCAAgentApiClient operations, System.Guid id)
            {
                return operations.GetWorkspaceUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspace
            /// </summary>
            /// <remarks>
            /// Get single workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Workspace> GetWorkspaceUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteWorkspace
            /// </summary>
            /// <remarks>
            /// Delete workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            public static object DeleteWorkspaceUsingDELETE(this ISCAAgentApiClient operations, System.Guid id)
            {
                return operations.DeleteWorkspaceUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteWorkspace
            /// </summary>
            /// <remarks>
            /// Delete workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteWorkspaceUsingDELETEAsync(this ISCAAgentApiClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWorkspaceUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getIssues
            /// </summary>
            /// <remarks>
            /// Get issues for the given workspace. Note: If a project Default Branch is
            /// set or a branch name is given, only issues from scans of that branch are
            /// displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='branch'>
            /// Filter by branch name.
            /// </param>
            /// <param name='createdAfter'>
            /// Filter by issues created on or after the specified date.
            /// </param>
            /// <param name='createdBefore'>
            /// Filter by issues created on or before the specified date.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependency.
            /// </param>
            /// <param name='ignored'>
            /// If true, show only ignored issues.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='projectId'>
            /// Filter 0 or more project IDs.
            /// </param>
            /// <param name='scansAfter'>
            /// Filter by issues last seen in scans on or after the specified scan date.
            /// </param>
            /// <param name='scansBefore'>
            /// Filter by issues last seen in scans on or before the specified scan date.
            /// </param>
            /// <param name='search'>
            /// Filter by issues matching the provided text search.
            /// </param>
            /// <param name='severityGt'>
            /// Filter by issue severity greater than the provided value.
            /// </param>
            /// <param name='severityGte'>
            /// Filter by issue severity greater than or equal to the provided value.
            /// </param>
            /// <param name='severityLt'>
            /// Filter by issue severity less than the provided value.
            /// </param>
            /// <param name='severityLte'>
            /// Filter by issue severity less than or equal to the provided value.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(,asc|desc). Default order is
            /// created date descending.
            /// </param>
            /// <param name='status'>
            /// Filter by issue status.
            /// </param>
            /// <param name='type'>
            /// Filter by issue type.
            /// </param>
            /// <param name='vulnMethods'>
            /// Filter by vulnerable methods.
            /// </param>
            public static PagedResourcesIssueSummary GetIssuesUsingGET(this ISCAAgentApiClient operations, System.Guid id, string branch = default(string), System.DateTime? createdAfter = default(System.DateTime?), System.DateTime? createdBefore = default(System.DateTime?), bool? direct = default(bool?), bool? ignored = default(bool?), int? page = default(int?), IList<System.Guid?> projectId = default(IList<System.Guid?>), System.DateTime? scansAfter = default(System.DateTime?), System.DateTime? scansBefore = default(System.DateTime?), string search = default(string), double? severityGt = default(double?), double? severityGte = default(double?), double? severityLt = default(double?), double? severityLte = default(double?), int? size = default(int?), IList<string> sort = default(IList<string>), IList<string> status = default(IList<string>), IList<string> type = default(IList<string>), bool? vulnMethods = default(bool?))
            {
                return operations.GetIssuesUsingGETAsync(id, branch, createdAfter, createdBefore, direct, ignored, page, projectId, scansAfter, scansBefore, search, severityGt, severityGte, severityLt, severityLte, size, sort, status, type, vulnMethods).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getIssues
            /// </summary>
            /// <remarks>
            /// Get issues for the given workspace. Note: If a project Default Branch is
            /// set or a branch name is given, only issues from scans of that branch are
            /// displayed.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='branch'>
            /// Filter by branch name.
            /// </param>
            /// <param name='createdAfter'>
            /// Filter by issues created on or after the specified date.
            /// </param>
            /// <param name='createdBefore'>
            /// Filter by issues created on or before the specified date.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependency.
            /// </param>
            /// <param name='ignored'>
            /// If true, show only ignored issues.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='projectId'>
            /// Filter 0 or more project IDs.
            /// </param>
            /// <param name='scansAfter'>
            /// Filter by issues last seen in scans on or after the specified scan date.
            /// </param>
            /// <param name='scansBefore'>
            /// Filter by issues last seen in scans on or before the specified scan date.
            /// </param>
            /// <param name='search'>
            /// Filter by issues matching the provided text search.
            /// </param>
            /// <param name='severityGt'>
            /// Filter by issue severity greater than the provided value.
            /// </param>
            /// <param name='severityGte'>
            /// Filter by issue severity greater than or equal to the provided value.
            /// </param>
            /// <param name='severityLt'>
            /// Filter by issue severity less than the provided value.
            /// </param>
            /// <param name='severityLte'>
            /// Filter by issue severity less than or equal to the provided value.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(,asc|desc). Default order is
            /// created date descending.
            /// </param>
            /// <param name='status'>
            /// Filter by issue status.
            /// </param>
            /// <param name='type'>
            /// Filter by issue type.
            /// </param>
            /// <param name='vulnMethods'>
            /// Filter by vulnerable methods.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesIssueSummary> GetIssuesUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, string branch = default(string), System.DateTime? createdAfter = default(System.DateTime?), System.DateTime? createdBefore = default(System.DateTime?), bool? direct = default(bool?), bool? ignored = default(bool?), int? page = default(int?), IList<System.Guid?> projectId = default(IList<System.Guid?>), System.DateTime? scansAfter = default(System.DateTime?), System.DateTime? scansBefore = default(System.DateTime?), string search = default(string), double? severityGt = default(double?), double? severityGte = default(double?), double? severityLt = default(double?), double? severityLte = default(double?), int? size = default(int?), IList<string> sort = default(IList<string>), IList<string> status = default(IList<string>), IList<string> type = default(IList<string>), bool? vulnMethods = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIssuesUsingGETWithHttpMessagesAsync(id, branch, createdAfter, createdBefore, direct, ignored, page, projectId, scansAfter, scansBefore, search, severityGt, severityGte, severityLt, severityLte, size, sort, status, type, vulnMethods, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getLibraries
            /// </summary>
            /// <remarks>
            /// Get libraries for the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependencies only, false will filter by indirect
            /// dependencies.
            /// </param>
            /// <param name='hasVulnerabilities'>
            /// Filter by libraries with vulnerabilities only. If false, filter by
            /// libraries with no vulnerabilities.
            /// </param>
            /// <param name='outOfDate'>
            /// Filter by out-of-date libraries only. If false, filter by up-to-date
            /// libraries.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            public static PagedResourcesLibrarySummary GetLibrariesUsingGET(this ISCAAgentApiClient operations, System.Guid id, bool? direct = default(bool?), bool? hasVulnerabilities = default(bool?), bool? outOfDate = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetLibrariesUsingGETAsync(id, direct, hasVulnerabilities, outOfDate, page, search, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getLibraries
            /// </summary>
            /// <remarks>
            /// Get libraries for the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependencies only, false will filter by indirect
            /// dependencies.
            /// </param>
            /// <param name='hasVulnerabilities'>
            /// Filter by libraries with vulnerabilities only. If false, filter by
            /// libraries with no vulnerabilities.
            /// </param>
            /// <param name='outOfDate'>
            /// Filter by out-of-date libraries only. If false, filter by up-to-date
            /// libraries.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesLibrarySummary> GetLibrariesUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, bool? direct = default(bool?), bool? hasVulnerabilities = default(bool?), bool? outOfDate = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibrariesUsingGETWithHttpMessagesAsync(id, direct, hasVulnerabilities, outOfDate, page, search, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getUnmatchedLibraries
            /// </summary>
            /// <remarks>
            /// Get unmatched libraries for the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by unmatched library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            public static PagedResourcesUnmatchedLibraryReportResource GetUnmatchedLibrariesUsingGET(this ISCAAgentApiClient operations, System.Guid id, int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetUnmatchedLibrariesUsingGETAsync(id, page, search, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getUnmatchedLibraries
            /// </summary>
            /// <remarks>
            /// Get unmatched libraries for the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by unmatched library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesUnmatchedLibraryReportResource> GetUnmatchedLibrariesUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnmatchedLibrariesUsingGETWithHttpMessagesAsync(id, page, search, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaceProjects
            /// </summary>
            /// <remarks>
            /// Get workspace projects.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// The Project name filter.
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// name ascending.
            /// </param>
            public static PagedResourcesProject GetWorkspaceProjectsUsingGET(this ISCAAgentApiClient operations, System.Guid id, int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetWorkspaceProjectsUsingGETAsync(id, page, search, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaceProjects
            /// </summary>
            /// <remarks>
            /// Get workspace projects.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='page'>
            /// The page of results that you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// The Project name filter.
            /// </param>
            /// <param name='size'>
            /// The number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). The default order is
            /// name ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesProject> GetWorkspaceProjectsUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceProjectsUsingGETWithHttpMessagesAsync(id, page, search, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getProjects
            /// </summary>
            /// <remarks>
            /// Get single project in an agent-based scan workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            public static Project GetProjectsUsingGET(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId)
            {
                return operations.GetProjectsUsingGETAsync(id, projectId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getProjects
            /// </summary>
            /// <remarks>
            /// Get single project in an agent-based scan workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Project> GetProjectsUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectsUsingGETWithHttpMessagesAsync(id, projectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getProjectIssues
            /// </summary>
            /// <remarks>
            /// Get issues from a project in an agent-based scan workspace, including the
            /// linked container project.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            /// <param name='linkedProjects'>
            /// Request issues from linked projects.
            /// </param>
            /// <param name='status'>
            /// Filter by issue status.
            /// </param>
            public static PagedResourcesIssueSummary GetProjectIssuesUsingGET(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId, bool? linkedProjects = default(bool?), IList<string> status = default(IList<string>))
            {
                return operations.GetProjectIssuesUsingGETAsync(id, projectId, linkedProjects, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getProjectIssues
            /// </summary>
            /// <remarks>
            /// Get issues from a project in an agent-based scan workspace, including the
            /// linked container project.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            /// <param name='linkedProjects'>
            /// Request issues from linked projects.
            /// </param>
            /// <param name='status'>
            /// Filter by issue status.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesIssueSummary> GetProjectIssuesUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId, bool? linkedProjects = default(bool?), IList<string> status = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectIssuesUsingGETWithHttpMessagesAsync(id, projectId, linkedProjects, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getProjectLibraries
            /// </summary>
            /// <remarks>
            /// Get libraries from a project in an agent-based scan workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependencies only. If false, filter by indirect
            /// dependencies only.
            /// </param>
            /// <param name='hasVulnerabilities'>
            /// Filter by libraries with vulnerabilities only. If false, filter by
            /// libraries with no vulnerabilities.
            /// </param>
            /// <param name='outOfDate'>
            /// Filter by out-of-date libraries only. If false, filter by up-to-date
            /// libraries only.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            public static PagedResourcesLibrarySummary GetProjectLibrariesUsingGET(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId, bool? direct = default(bool?), bool? hasVulnerabilities = default(bool?), bool? outOfDate = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>))
            {
                return operations.GetProjectLibrariesUsingGETAsync(id, projectId, direct, hasVulnerabilities, outOfDate, page, search, size, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getProjectLibraries
            /// </summary>
            /// <remarks>
            /// Get libraries from a project in an agent-based scan workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='projectId'>
            /// Project ID.
            /// </param>
            /// <param name='direct'>
            /// Filter by direct dependencies only. If false, filter by indirect
            /// dependencies only.
            /// </param>
            /// <param name='hasVulnerabilities'>
            /// Filter by libraries with vulnerabilities only. If false, filter by
            /// libraries with no vulnerabilities.
            /// </param>
            /// <param name='outOfDate'>
            /// Filter by out-of-date libraries only. If false, filter by up-to-date
            /// libraries only.
            /// </param>
            /// <param name='page'>
            /// Results page you want to retrieve (0..N).
            /// </param>
            /// <param name='search'>
            /// Filter by library names matching the provided text search.
            /// </param>
            /// <param name='size'>
            /// Number of records per page.
            /// </param>
            /// <param name='sort'>
            /// Sorting criteria in the format: property(asc|desc). Default order is name
            /// ascending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesLibrarySummary> GetProjectLibrariesUsingGETAsync(this ISCAAgentApiClient operations, System.Guid id, System.Guid projectId, bool? direct = default(bool?), bool? hasVulnerabilities = default(bool?), bool? outOfDate = default(bool?), int? page = default(int?), string search = default(string), int? size = default(int?), IList<string> sort = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectLibrariesUsingGETWithHttpMessagesAsync(id, projectId, direct, hasVulnerabilities, outOfDate, page, search, size, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// addTeam
            /// </summary>
            /// <remarks>
            /// Add teams to a workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='teamId'>
            /// Team ID.
            /// </param>
            public static ResponseEntity AddTeamUsingPUT(this ISCAAgentApiClient operations, System.Guid id, string teamId)
            {
                return operations.AddTeamUsingPUTAsync(id, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// addTeam
            /// </summary>
            /// <remarks>
            /// Add teams to a workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='teamId'>
            /// Team ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseEntity> AddTeamUsingPUTAsync(this ISCAAgentApiClient operations, System.Guid id, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTeamUsingPUTWithHttpMessagesAsync(id, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteTeam
            /// </summary>
            /// <remarks>
            /// Remove teams from a workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='teamId'>
            /// Team ID.
            /// </param>
            public static object DeleteTeamUsingDELETE(this ISCAAgentApiClient operations, System.Guid id, string teamId)
            {
                return operations.DeleteTeamUsingDELETEAsync(id, teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteTeam
            /// </summary>
            /// <remarks>
            /// Remove teams from a workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Workspace ID.
            /// </param>
            /// <param name='teamId'>
            /// Team ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTeamUsingDELETEAsync(this ISCAAgentApiClient operations, System.Guid id, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTeamUsingDELETEWithHttpMessagesAsync(id, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaceAgents
            /// </summary>
            /// <remarks>
            /// Get a list of agents tied to the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static ResourcesAgentSummary GetWorkspaceAgentsUsingGET(this ISCAAgentApiClient operations, System.Guid workspaceId)
            {
                return operations.GetWorkspaceAgentsUsingGETAsync(workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaceAgents
            /// </summary>
            /// <remarks>
            /// Get a list of agents tied to the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcesAgentSummary> GetWorkspaceAgentsUsingGETAsync(this ISCAAgentApiClient operations, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceAgentsUsingGETWithHttpMessagesAsync(workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createWorkspaceAgent
            /// </summary>
            /// <remarks>
            /// Create a new agent in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createModel'>
            /// Agent create model including name and agent_type.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static CreatedAgent CreateWorkspaceAgentUsingPOST(this ISCAAgentApiClient operations, AgentCreate createModel, System.Guid workspaceId)
            {
                return operations.CreateWorkspaceAgentUsingPOSTAsync(createModel, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createWorkspaceAgent
            /// </summary>
            /// <remarks>
            /// Create a new agent in the given workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createModel'>
            /// Agent create model including name and agent_type.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreatedAgent> CreateWorkspaceAgentUsingPOSTAsync(this ISCAAgentApiClient operations, AgentCreate createModel, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWorkspaceAgentUsingPOSTWithHttpMessagesAsync(createModel, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaceAgent
            /// </summary>
            /// <remarks>
            /// Get a single AgentSummaryResource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static AgentSummary GetWorkspaceAgentUsingGET(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId)
            {
                return operations.GetWorkspaceAgentUsingGETAsync(agentId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaceAgent
            /// </summary>
            /// <remarks>
            /// Get a single AgentSummaryResource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgentSummary> GetWorkspaceAgentUsingGETAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceAgentUsingGETWithHttpMessagesAsync(agentId, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Workspace Agent
            /// </summary>
            /// <remarks>
            /// Delete an agent in a given workspace, with the provided workspace
            /// identifier and agent identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static void DeleteAgentInWorkspaceUsingDELETE(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId)
            {
                operations.DeleteAgentInWorkspaceUsingDELETEAsync(agentId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Workspace Agent
            /// </summary>
            /// <remarks>
            /// Delete an agent in a given workspace, with the provided workspace
            /// identifier and agent identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAgentInWorkspaceUsingDELETEAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAgentInWorkspaceUsingDELETEWithHttpMessagesAsync(agentId, workspaceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// renewWorkspaceAgentToken
            /// </summary>
            /// <remarks>
            /// Create a new agent token for the given agent ID. This request invalidates
            /// the existing tokens for this agent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static AgentToken RenewWorkspaceAgentTokenUsingPOST(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId)
            {
                return operations.RenewWorkspaceAgentTokenUsingPOSTAsync(agentId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// renewWorkspaceAgentToken
            /// </summary>
            /// <remarks>
            /// Create a new agent token for the given agent ID. This request invalidates
            /// the existing tokens for this agent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgentToken> RenewWorkspaceAgentTokenUsingPOSTAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewWorkspaceAgentTokenUsingPOSTWithHttpMessagesAsync(agentId, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaceAgentTokens
            /// </summary>
            /// <remarks>
            /// Get a list of the tokens tied to a specific agent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static ResourcesAgentTokenWithoutAccessToken GetWorkspaceAgentTokensUsingGET(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId)
            {
                return operations.GetWorkspaceAgentTokensUsingGETAsync(agentId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaceAgentTokens
            /// </summary>
            /// <remarks>
            /// Get a list of the tokens tied to a specific agent.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourcesAgentTokenWithoutAccessToken> GetWorkspaceAgentTokensUsingGETAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceAgentTokensUsingGETWithHttpMessagesAsync(agentId, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getWorkspaceAgentToken
            /// </summary>
            /// <remarks>
            /// Get a single agent token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='tokenId'>
            /// Token ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static AgentTokenWithoutAccessToken GetWorkspaceAgentTokenUsingGET(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid tokenId, System.Guid workspaceId)
            {
                return operations.GetWorkspaceAgentTokenUsingGETAsync(agentId, tokenId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getWorkspaceAgentToken
            /// </summary>
            /// <remarks>
            /// Get a single agent token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='tokenId'>
            /// Token ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AgentTokenWithoutAccessToken> GetWorkspaceAgentTokenUsingGETAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid tokenId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceAgentTokenUsingGETWithHttpMessagesAsync(agentId, tokenId, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// revokeWorkspaceAgentToken
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='tokenId'>
            /// Token ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            public static void RevokeWorkspaceAgentTokenUsingDELETE(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid tokenId, System.Guid workspaceId)
            {
                operations.RevokeWorkspaceAgentTokenUsingDELETEAsync(agentId, tokenId, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// revokeWorkspaceAgentToken
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='agentId'>
            /// Agent ID.
            /// </param>
            /// <param name='tokenId'>
            /// Token ID.
            /// </param>
            /// <param name='workspaceId'>
            /// Workspace ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeWorkspaceAgentTokenUsingDELETEAsync(this ISCAAgentApiClient operations, System.Guid agentId, System.Guid tokenId, System.Guid workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeWorkspaceAgentTokenUsingDELETEWithHttpMessagesAsync(agentId, tokenId, workspaceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// getApplicationProjects
            /// </summary>
            /// <remarks>
            /// Get application projects.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appGuid'>
            /// Application GUID.
            /// </param>
            public static LinkedProjects GetApplicationProjectsUsingGET(this ISCAAgentApiClient operations, System.Guid appGuid)
            {
                return operations.GetApplicationProjectsUsingGETAsync(appGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getApplicationProjects
            /// </summary>
            /// <remarks>
            /// Get application projects.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appGuid'>
            /// Application GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedProjects> GetApplicationProjectsUsingGETAsync(this ISCAAgentApiClient operations, System.Guid appGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationProjectsUsingGETWithHttpMessagesAsync(appGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getSbomCyclonedx
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetUuid'>
            /// target ID.
            /// </param>
            /// <param name='type'>
            /// Filter by scan type. Possible values include: 'application', 'agent'
            /// </param>
            /// <param name='vulnerability'>
            /// Include vulnerability infomation.
            /// </param>
            /// <param name='linked'>
            /// Include results from linked projects.
            /// </param>
            public static Sbom GetSbomCyclonedxUsingGET(this ISCAAgentApiClient operations, System.Guid targetUuid, string type, bool? vulnerability = true, bool? linked = false)
            {
                return operations.GetSbomCyclonedxUsingGETAsync(targetUuid, type, vulnerability, linked).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getSbomCyclonedx
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetUuid'>
            /// target ID.
            /// </param>
            /// <param name='type'>
            /// Filter by scan type. Possible values include: 'application', 'agent'
            /// </param>
            /// <param name='vulnerability'>
            /// Include vulnerability infomation.
            /// </param>
            /// <param name='linked'>
            /// Include results from linked projects.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Sbom> GetSbomCyclonedxUsingGETAsync(this ISCAAgentApiClient operations, System.Guid targetUuid, string type, bool? vulnerability = true, bool? linked = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSbomCyclonedxUsingGETWithHttpMessagesAsync(targetUuid, type, vulnerability, linked, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getSbomSpdx
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetUuid'>
            /// target ID.
            /// </param>
            /// <param name='type'>
            /// Filter by scan type. Possible values include: 'application', 'agent'
            /// </param>
            /// <param name='vulnerability'>
            /// Include vulnerability information.
            /// </param>
            /// <param name='dependency'>
            /// Include dependecy information.
            /// </param>
            public static SbomSpdx GetSbomSpdxUsingGET(this ISCAAgentApiClient operations, System.Guid targetUuid, string type, bool? vulnerability = true, bool? dependency = true)
            {
                return operations.GetSbomSpdxUsingGETAsync(targetUuid, type, vulnerability, dependency).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getSbomSpdx
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetUuid'>
            /// target ID.
            /// </param>
            /// <param name='type'>
            /// Filter by scan type. Possible values include: 'application', 'agent'
            /// </param>
            /// <param name='vulnerability'>
            /// Include vulnerability information.
            /// </param>
            /// <param name='dependency'>
            /// Include dependecy information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SbomSpdx> GetSbomSpdxUsingGETAsync(this ISCAAgentApiClient operations, System.Guid targetUuid, string type, bool? vulnerability = true, bool? dependency = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSbomSpdxUsingGETWithHttpMessagesAsync(targetUuid, type, vulnerability, dependency, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
