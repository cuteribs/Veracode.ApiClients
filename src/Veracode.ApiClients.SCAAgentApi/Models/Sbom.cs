// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.SCAAgent.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SBOM Object
    /// </summary>
    public partial class Sbom
    {
        /// <summary>
        /// Initializes a new instance of the Sbom class.
        /// </summary>
        public Sbom()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Sbom class.
        /// </summary>
        /// <param name="bomFormat">BOM Format</param>
        /// <param name="specVersion">CycloneDX Specification Version</param>
        /// <param name="serialNumber">BOM Serial Number</param>
        /// <param name="version">BOM Version</param>
        /// <param name="metadata">BOM Metadata</param>
        /// <param name="components">Components</param>
        /// <param name="dependencies">Dependencies</param>
        /// <param name="vulnerabilities">Vulnerabilities</param>
        public Sbom(string bomFormat = default(string), string specVersion = default(string), string serialNumber = default(string), int? version = default(int?), Metadata metadata = default(Metadata), IList<Component> components = default(IList<Component>), IList<Dependency> dependencies = default(IList<Dependency>), IList<Vulnerability> vulnerabilities = default(IList<Vulnerability>))
        {
            BomFormat = bomFormat;
            SpecVersion = specVersion;
            SerialNumber = serialNumber;
            Version = version;
            Metadata = metadata;
            Components = components;
            Dependencies = dependencies;
            Vulnerabilities = vulnerabilities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets BOM Format
        /// </summary>
        /// <remarks>
        /// Specifies the format of the BOM. This helps to identify the file as
        /// CycloneDX since BOMs do not have a filename convention nor does
        /// JSON schema support namespaces. This value MUST be "CycloneDX".
        /// Possible values include: 'CycloneDX'
        /// </remarks>
        [JsonProperty(PropertyName = "bomFormat")]
        public string BomFormat { get; set; }

        /// <summary>
        /// Gets or sets cycloneDX Specification Version
        /// </summary>
        /// <remarks>
        /// The version of the CycloneDX specification a BOM conforms to
        /// (starting at version 1.2).
        /// </remarks>
        [JsonProperty(PropertyName = "specVersion")]
        public string SpecVersion { get; set; }

        /// <summary>
        /// Gets or sets BOM Serial Number
        /// </summary>
        /// <remarks>
        /// Every BOM generated should have a unique serial number, even if the
        /// contents of the BOM have not changed over time. If specified, the
        /// serial number MUST conform to RFC-4122. Veracode recommends using
        /// serial numbers.
        /// </remarks>
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets BOM Version
        /// </summary>
        /// <remarks>
        /// Whenever an existing BOM is modified, either manually or through
        /// automated processes, the version of the BOM should be incremented
        /// by 1. When a system is presented with multiple BOMs with identical
        /// serial numbers, the system should use the most recent version of
        /// the BOM. The default version is '1'.
        /// </remarks>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or sets BOM Metadata
        /// </summary>
        /// <remarks>
        /// Provides additional information about a BOM.
        /// </remarks>
        [JsonProperty(PropertyName = "metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>
        /// Gets or sets components
        /// </summary>
        /// <remarks>
        /// A list of software and hardware components.
        /// </remarks>
        [JsonProperty(PropertyName = "components")]
        public IList<Component> Components { get; set; }

        /// <summary>
        /// Gets or sets dependencies
        /// </summary>
        /// <remarks>
        /// Provides the ability to document dependency relationships.
        /// </remarks>
        [JsonProperty(PropertyName = "dependencies")]
        public IList<Dependency> Dependencies { get; set; }

        /// <summary>
        /// Gets or sets vulnerabilities
        /// </summary>
        /// <remarks>
        /// Vulnerabilities identified in components or services.
        /// </remarks>
        [JsonProperty(PropertyName = "vulnerabilities")]
        public IList<Vulnerability> Vulnerabilities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SerialNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SerialNumber, "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SerialNumber", "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$");
                }
            }
            if (Metadata != null)
            {
                Metadata.Validate();
            }
            if (Components != null)
            {
                if (Components.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Components)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Components");
                }
                foreach (var element in Components)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Dependencies != null)
            {
                if (Dependencies.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Dependencies)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Dependencies");
                }
                foreach (var element1 in Dependencies)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Vulnerabilities != null)
            {
                if (Vulnerabilities.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Vulnerabilities)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Vulnerabilities");
                }
                foreach (var element2 in Vulnerabilities)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
