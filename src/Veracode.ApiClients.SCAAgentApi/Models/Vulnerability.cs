// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.SCAAgent.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Vulnerability
    /// </summary>
    /// <remarks>
    /// Defines a weakness in a component or service that could be exploited or
    /// triggered by a threat source.
    /// </remarks>
    public partial class Vulnerability
    {
        /// <summary>
        /// Initializes a new instance of the Vulnerability class.
        /// </summary>
        public Vulnerability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Vulnerability class.
        /// </summary>
        /// <param name="bomRef">BOM Reference</param>
        /// <param name="id">ID</param>
        /// <param name="source">The source that published the
        /// vulnerability.</param>
        /// <param name="ratings">Ratings</param>
        /// <param name="cwes">CWEs</param>
        /// <param name="description">Description</param>
        /// <param name="created">Created</param>
        /// <param name="published">Published</param>
        /// <param name="updated">Updated</param>
        /// <param name="affects">Affects</param>
        /// <param name="properties">Properties</param>
        public Vulnerability(string bomRef = default(string), string id = default(string), VulnerabilitySource source = default(VulnerabilitySource), IList<Rating> ratings = default(IList<Rating>), IList<int?> cwes = default(IList<int?>), string description = default(string), System.DateTime? created = default(System.DateTime?), System.DateTime? published = default(System.DateTime?), System.DateTime? updated = default(System.DateTime?), IList<VulnerabilityAffects> affects = default(IList<VulnerabilityAffects>), IList<Property> properties = default(IList<Property>))
        {
            BomRef = bomRef;
            Id = id;
            Source = source;
            Ratings = ratings;
            Cwes = cwes;
            Description = description;
            Created = created;
            Published = published;
            Updated = updated;
            Affects = affects;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets BOM Reference
        /// </summary>
        /// <remarks>
        /// An optional identifier which can be used to reference the
        /// vulnerability elsewhere in the BOM. Every bom-ref MUST be unique
        /// within the BOM.
        /// </remarks>
        [JsonProperty(PropertyName = "bom-ref")]
        public string BomRef { get; set; }

        /// <summary>
        /// Gets or sets ID
        /// </summary>
        /// <remarks>
        /// The identifier that uniquely identifies the vulnerability.
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the source that published the vulnerability.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public VulnerabilitySource Source { get; set; }

        /// <summary>
        /// Gets or sets ratings
        /// </summary>
        /// <remarks>
        /// List of vulnerability ratings.
        /// </remarks>
        [JsonProperty(PropertyName = "ratings")]
        public IList<Rating> Ratings { get; set; }

        /// <summary>
        /// Gets or sets cWEs
        /// </summary>
        /// <remarks>
        /// List of Common Weakness Enumeration (CWEs) codes that describes
        /// this vulnerability. For example, 399 (of
        /// https://cwe.mitre.org/data/definitions/399.html)
        /// </remarks>
        [JsonProperty(PropertyName = "cwes")]
        public IList<int?> Cwes { get; set; }

        /// <summary>
        /// Gets or sets description
        /// </summary>
        /// <remarks>
        /// A description of the vulnerability as provided by the source.
        /// </remarks>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets created
        /// </summary>
        /// <remarks>
        /// The date and time (timestamp) when the vulnerability record was
        /// created in the vulnerability database.
        /// </remarks>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets published
        /// </summary>
        /// <remarks>
        /// The date and time (timestamp) when the vulnerability record was
        /// first published.
        /// </remarks>
        [JsonProperty(PropertyName = "published")]
        public System.DateTime? Published { get; set; }

        /// <summary>
        /// Gets or sets updated
        /// </summary>
        /// <remarks>
        /// The date and time (timestamp) when the vulnerability record was
        /// last updated.
        /// </remarks>
        [JsonProperty(PropertyName = "updated")]
        public System.DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets affects
        /// </summary>
        /// <remarks>
        /// The components or services that are affected by the vulnerability.
        /// </remarks>
        [JsonProperty(PropertyName = "affects")]
        public IList<VulnerabilityAffects> Affects { get; set; }

        /// <summary>
        /// Gets or sets properties
        /// </summary>
        /// <remarks>
        /// Provides the ability to document properties in a name-value store.
        /// This provides flexibility to include data not officially supported
        /// in the standard without having to use additional namespaces or
        /// create extensions. Unlike key-value stores, properties support
        /// duplicate names, each potentially having different values. Property
        /// names of interest to the general public are encouraged to be
        /// registered in the [CycloneDX Property
        /// Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy).
        /// Formal registration is optional.
        /// </remarks>
        [JsonProperty(PropertyName = "properties")]
        public IList<Property> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Affects != null)
            {
                if (Affects.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(Affects)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "Affects");
                }
                foreach (var element in Affects)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
