// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.FindingsApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Finding
    /// </summary>
    public partial class Finding
    {
        /// <summary>
        /// Initializes a new instance of the Finding class.
        /// </summary>
        public Finding()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Finding class.
        /// </summary>
        /// <param name="annotations">All comments and explanatory notes
        /// related to this application finding.</param>
        /// <param name="buildId">The build ID.</param>
        /// <param name="contextGuid">The context ID.</param>
        /// <param name="contextType">Context type, which filters results to
        /// show only the findings of this specific context type. The findings
        /// status parameter is relative to this context parameter. Possible
        /// values include: 'APPLICATION', 'SANDBOX'</param>
        /// <param name="count">Number of times a finding occurs in an
        /// application, often referred to as prevalence.</param>
        /// <param name="description">The detailed description of the
        /// finding.</param>
        /// <param name="findingDetails"> | Common:
        /// cwe: CWE (Common Weakness Enumeration);
        /// cvss: the CVSS associated with the finding;
        /// severity: Severity of the finding;
        ///
        /// | Static:
        /// exploitability: the likelihood that this finding could be exploited
        /// by an attacker. Values: -2: Very Unlikely, -1: Unlikely, 0:
        /// Neutral, 1: Likely, 2: Very Likely.;
        /// attack_vector: the function or class where the flaw exists;
        /// file_line_number: line number in file;
        /// file_name: filename;
        /// file_path: file path;
        /// finding_category: the finding category;
        /// module: module name;
        /// procedure: name of the procedure where the flaw exists;
        /// relative_location: relative location of the flaw in the procedure;
        ///
        /// | Dynamic:
        /// attack_vector: URL or some input parameter;
        /// hostname: hostname of the URL that contains the vulnerability;
        /// port: the port of the hostname that was attacked;
        /// path: URI path;
        /// plugin: the type of attack sent;
        /// finding_category: The finding category;
        /// URL: URL of location where the flaw exists;
        /// vulnerable_parameter: the parameter that contains a vulnerability;
        /// discovered_by_vsa: whether discovered by Virtual Scan Appliance;
        ///
        /// | Manual:
        /// capec_id: attack category which contains subcategories as (abuse of
        /// functionality, spoofing, probabilistic techniques, exploitation of
        /// authentication, resource depletion, exploitation of
        /// privilege/trust, injection, data structure attacks, data leakage
        /// attacks, resource manipulation, time and state attacks);
        /// exploit_desc: description of the cause of the flaw;
        /// exploit_difficulty: category of level of effort needed to fix the
        /// flaw;
        /// input_vector: URL for the attack vector;
        /// location: relative location of flaw;
        /// module: module where the flaw exists;
        /// remediation_desc: description of remediation needed for attack
        /// vector;
        /// severity_desc: description of severity of flaw;
        ///
        /// | Sca:
        /// cve: CVE (Common Vulnerabilities and Exposures);
        /// version: third-party component version;
        /// product_id: product ID containing the vulnerability;
        /// component_id: unique ID for the component;
        /// component_path(s): The list of component paths containing this
        /// vulnerability;
        /// component_filename: component filename;
        /// licenses: Displays all licenses found for a component with the
        /// specified risk rating;
        /// metadata: Displays metadata values, such as SCA scan mode and
        /// dependency mode;
        /// language: coding language;
        ///
        /// </param>
        /// <param name="gracePeriodExpiresDate">The date on which a grace
        /// period expires for the finding. Veracode calculates this date based
        /// on the last date a finding was opened (First Found or Last Reopened
        /// date), and based on the grace period provided in the security
        /// policy assigned to the application. This date only applies to
        /// findings that impact policy compliance. The date/time format is per
        /// RFC3339 and ISO-8601, and the timezone is UTC. Example:
        /// 2019-04-12T23:20:50.52Z.</param>
        /// <param name="issueId">Unique ID within the context of this
        /// application.</param>
        /// <param name="scanType">The type of scan that Veracode used to
        /// discover this finding: static, dynamic, manual, SCA. Possible
        /// values include: 'STATIC', 'DYNAMIC', 'MANUAL', 'SCA'</param>
        /// <param name="violatesPolicy">Policy is violated or not.</param>
        public Finding(IList<Annotation> annotations = default(IList<Annotation>), long? buildId = default(long?), string contextGuid = default(string), string contextType = default(string), int? count = default(int?), string description = default(string), object findingDetails = default(object), FindingStatus findingStatus = default(FindingStatus), System.DateTime? gracePeriodExpiresDate = default(System.DateTime?), long? issueId = default(long?), string scanType = default(string), bool? violatesPolicy = default(bool?))
        {
            Annotations = annotations;
            BuildId = buildId;
            ContextGuid = contextGuid;
            ContextType = contextType;
            Count = count;
            Description = description;
            FindingDetails = findingDetails;
            FindingStatus = findingStatus;
            GracePeriodExpiresDate = gracePeriodExpiresDate;
            IssueId = issueId;
            ScanType = scanType;
            ViolatesPolicy = violatesPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets all comments and explanatory notes related to this
        /// application finding.
        /// </summary>
        [JsonProperty(PropertyName = "annotations")]
        public IList<Annotation> Annotations { get; set; }

        /// <summary>
        /// Gets or sets the build ID.
        /// </summary>
        [JsonProperty(PropertyName = "build_id")]
        public long? BuildId { get; set; }

        /// <summary>
        /// Gets or sets the context ID.
        /// </summary>
        [JsonProperty(PropertyName = "context_guid")]
        public string ContextGuid { get; set; }

        /// <summary>
        /// Gets or sets context type, which filters results to show only the
        /// findings of this specific context type. The findings status
        /// parameter is relative to this context parameter. Possible values
        /// include: 'APPLICATION', 'SANDBOX'
        /// </summary>
        [JsonProperty(PropertyName = "context_type")]
        public string ContextType { get; set; }

        /// <summary>
        /// Gets or sets number of times a finding occurs in an application,
        /// often referred to as prevalence.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or sets the detailed description of the finding.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets  | Common:
        /// cwe: CWE (Common Weakness Enumeration);
        /// cvss: the CVSS associated with the finding;
        /// severity: Severity of the finding;
        ///
        /// | Static:
        /// exploitability: the likelihood that this finding could be exploited
        /// by an attacker. Values: -2: Very Unlikely, -1: Unlikely, 0:
        /// Neutral, 1: Likely, 2: Very Likely.;
        /// attack_vector: the function or class where the flaw exists;
        /// file_line_number: line number in file;
        /// file_name: filename;
        /// file_path: file path;
        /// finding_category: the finding category;
        /// module: module name;
        /// procedure: name of the procedure where the flaw exists;
        /// relative_location: relative location of the flaw in the procedure;
        ///
        /// | Dynamic:
        /// attack_vector: URL or some input parameter;
        /// hostname: hostname of the URL that contains the vulnerability;
        /// port: the port of the hostname that was attacked;
        /// path: URI path;
        /// plugin: the type of attack sent;
        /// finding_category: The finding category;
        /// URL: URL of location where the flaw exists;
        /// vulnerable_parameter: the parameter that contains a vulnerability;
        /// discovered_by_vsa: whether discovered by Virtual Scan Appliance;
        ///
        /// | Manual:
        /// capec_id: attack category which contains subcategories as (abuse of
        /// functionality, spoofing, probabilistic techniques, exploitation of
        /// authentication, resource depletion, exploitation of
        /// privilege/trust, injection, data structure attacks, data leakage
        /// attacks, resource manipulation, time and state attacks);
        /// exploit_desc: description of the cause of the flaw;
        /// exploit_difficulty: category of level of effort needed to fix the
        /// flaw;
        /// input_vector: URL for the attack vector;
        /// location: relative location of flaw;
        /// module: module where the flaw exists;
        /// remediation_desc: description of remediation needed for attack
        /// vector;
        /// severity_desc: description of severity of flaw;
        ///
        /// | Sca:
        /// cve: CVE (Common Vulnerabilities and Exposures);
        /// version: third-party component version;
        /// product_id: product ID containing the vulnerability;
        /// component_id: unique ID for the component;
        /// component_path(s): The list of component paths containing this
        /// vulnerability;
        /// component_filename: component filename;
        /// licenses: Displays all licenses found for a component with the
        /// specified risk rating;
        /// metadata: Displays metadata values, such as SCA scan mode and
        /// dependency mode;
        /// language: coding language;
        ///
        ///
        /// </summary>
        [JsonProperty(PropertyName = "finding_details")]
        public object FindingDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "finding_status")]
        public FindingStatus FindingStatus { get; set; }

        /// <summary>
        /// Gets or sets the date on which a grace period expires for the
        /// finding. Veracode calculates this date based on the last date a
        /// finding was opened (First Found or Last Reopened date), and based
        /// on the grace period provided in the security policy assigned to the
        /// application. This date only applies to findings that impact policy
        /// compliance. The date/time format is per RFC3339 and ISO-8601, and
        /// the timezone is UTC. Example: 2019-04-12T23:20:50.52Z.
        /// </summary>
        [JsonProperty(PropertyName = "grace_period_expires_date")]
        public System.DateTime? GracePeriodExpiresDate { get; set; }

        /// <summary>
        /// Gets or sets unique ID within the context of this application.
        /// </summary>
        [JsonProperty(PropertyName = "issue_id")]
        public long? IssueId { get; set; }

        /// <summary>
        /// Gets or sets the type of scan that Veracode used to discover this
        /// finding: static, dynamic, manual, SCA. Possible values include:
        /// 'STATIC', 'DYNAMIC', 'MANUAL', 'SCA'
        /// </summary>
        [JsonProperty(PropertyName = "scan_type")]
        public string ScanType { get; set; }

        /// <summary>
        /// Gets or sets policy is violated or not.
        /// </summary>
        [JsonProperty(PropertyName = "violates_policy")]
        public bool? ViolatesPolicy { get; set; }

    }
}
