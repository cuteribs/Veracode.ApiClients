// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.IdentityApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IdentityApiClient.
    /// </summary>
    public static partial class IdentityApiClientExtensions
    {
            /// <summary>
            /// Get API credentials for self.
            /// </summary>
            /// <remarks>
            /// Get API credentials for self based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceOfApiCredentialsWithoutSecret GetUserApiCredsUsingGET(this IIdentityApiClient operations)
            {
                return operations.GetUserApiCredsUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get API credentials for self.
            /// </summary>
            /// <remarks>
            /// Get API credentials for self based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfApiCredentialsWithoutSecret> GetUserApiCredsUsingGETAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserApiCredsUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate API credentials.
            /// </summary>
            /// <remarks>
            /// Generate API credentials.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceOfApiCredentials GenerateApiCredsUsingPOST(this IIdentityApiClient operations)
            {
                return operations.GenerateApiCredsUsingPOSTAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate API credentials.
            /// </summary>
            /// <remarks>
            /// Generate API credentials.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfApiCredentials> GenerateApiCredsUsingPOSTAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateApiCredsUsingPOSTWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete API credentials for self.
            /// </summary>
            /// <remarks>
            /// Delete API credentials based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void RevokeUserApiCredsUsingDELETE(this IIdentityApiClient operations)
            {
                operations.RevokeUserApiCredsUsingDELETEAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete API credentials for self.
            /// </summary>
            /// <remarks>
            /// Delete API credentials based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeUserApiCredsUsingDELETEAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeUserApiCredsUsingDELETEWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get specific API credentials.
            /// </summary>
            /// <remarks>
            /// Get specific API credentials based on path parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiCredsId'>
            /// The API ID for the client.
            /// </param>
            public static ResourceOfApiCredentialsWithoutSecret GetApiCredsUsingGET(this IIdentityApiClient operations, string apiCredsId)
            {
                return operations.GetApiCredsUsingGETAsync(apiCredsId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get specific API credentials.
            /// </summary>
            /// <remarks>
            /// Get specific API credentials based on path parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiCredsId'>
            /// The API ID for the client.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfApiCredentialsWithoutSecret> GetApiCredsUsingGETAsync(this IIdentityApiClient operations, string apiCredsId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiCredsUsingGETWithHttpMessagesAsync(apiCredsId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete specific API credentials.
            /// </summary>
            /// <remarks>
            /// Delete specific API credentials based on path parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiCredsId'>
            /// The API ID for the client.
            /// </param>
            public static void RevokeApiCredsUsingDELETE(this IIdentityApiClient operations, string apiCredsId)
            {
                operations.RevokeApiCredsUsingDELETEAsync(apiCredsId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete specific API credentials.
            /// </summary>
            /// <remarks>
            /// Delete specific API credentials based on path parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiCredsId'>
            /// The API ID for the client.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeApiCredsUsingDELETEAsync(this IIdentityApiClient operations, string apiCredsId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeApiCredsUsingDELETEWithHttpMessagesAsync(apiCredsId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get specific API credentials by userId.
            /// </summary>
            /// <remarks>
            /// As an Administrator user, get specific API credentials based on userId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void GetApiCredsByUserId(this IIdentityApiClient operations, object userId)
            {
                operations.GetApiCredsByUserIdAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get specific API credentials by userId.
            /// </summary>
            /// <remarks>
            /// As an Administrator user, get specific API credentials based on userId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetApiCredsByUserIdAsync(this IIdentityApiClient operations, object userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetApiCredsByUserIdWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Generate API credentials by userId
            /// </summary>
            /// <remarks>
            /// As an Administrator user, generate API credentials based on userId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void GenerateApiCredsByUserId(this IIdentityApiClient operations, object userId)
            {
                operations.GenerateApiCredsByUserIdAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate API credentials by userId
            /// </summary>
            /// <remarks>
            /// As an Administrator user, generate API credentials based on userId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateApiCredsByUserIdAsync(this IIdentityApiClient operations, object userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateApiCredsByUserIdWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete specific API credentials by userId.
            /// </summary>
            /// <remarks>
            /// As an Administrator user, delete specific API credentials based on userId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void RevokeApiCredsByUserId(this IIdentityApiClient operations, object userId)
            {
                operations.RevokeApiCredsByUserIdAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete specific API credentials by userId.
            /// </summary>
            /// <remarks>
            /// As an Administrator user, delete specific API credentials based on userId.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeApiCredsByUserIdAsync(this IIdentityApiClient operations, object userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeApiCredsByUserIdWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of business units.
            /// </summary>
            /// <remarks>
            /// Gets a list of business units based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buName'>
            /// The business unit name.
            /// </param>
            public static PagedResourcesOfResourceOfBusinessUnit GetBusinessUnitsUsingGET(this IIdentityApiClient operations, string buName = default(string))
            {
                return operations.GetBusinessUnitsUsingGETAsync(buName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of business units.
            /// </summary>
            /// <remarks>
            /// Gets a list of business units based on the user principal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buName'>
            /// The business unit name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesOfResourceOfBusinessUnit> GetBusinessUnitsUsingGETAsync(this IIdentityApiClient operations, string buName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBusinessUnitsUsingGETWithHttpMessagesAsync(buName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a business unit.
            /// </summary>
            /// <remarks>
            /// Creates a business unit and returns the record with the ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnit'>
            /// businessUnit
            /// </param>
            public static ResourceOfBusinessUnitResource CreateBusinessUnitUsingPOST(this IIdentityApiClient operations, BusinessUnit businessUnit)
            {
                return operations.CreateBusinessUnitUsingPOSTAsync(businessUnit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a business unit.
            /// </summary>
            /// <remarks>
            /// Creates a business unit and returns the record with the ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnit'>
            /// businessUnit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfBusinessUnitResource> CreateBusinessUnitUsingPOSTAsync(this IIdentityApiClient operations, BusinessUnit businessUnit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBusinessUnitUsingPOSTWithHttpMessagesAsync(businessUnit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific business unit.
            /// </summary>
            /// <remarks>
            /// Get the specific business unit details for the ID provided as a path
            /// variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            public static ResourceOfBusinessUnitResource GetBusinessUnitUsingGET(this IIdentityApiClient operations, string businessUnitId)
            {
                return operations.GetBusinessUnitUsingGETAsync(businessUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific business unit.
            /// </summary>
            /// <remarks>
            /// Get the specific business unit details for the ID provided as a path
            /// variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfBusinessUnitResource> GetBusinessUnitUsingGETAsync(this IIdentityApiClient operations, string businessUnitId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBusinessUnitUsingGETWithHttpMessagesAsync(businessUnitId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a business unit.
            /// </summary>
            /// <remarks>
            /// Updates the business unit for the ID provided as a path variable.
            /// Parameters excluded from the request are set to null (if allowed in the
            /// database) unless partial is set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            /// <param name='businessUnit'>
            /// businessUnit
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            public static ResourceOfBusinessUnitResource UpdateBusinessUnitUsingPUT(this IIdentityApiClient operations, string businessUnitId, BusinessUnit businessUnit, bool? partial = default(bool?), bool? incremental = default(bool?))
            {
                return operations.UpdateBusinessUnitUsingPUTAsync(businessUnitId, businessUnit, partial, incremental).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a business unit.
            /// </summary>
            /// <remarks>
            /// Updates the business unit for the ID provided as a path variable.
            /// Parameters excluded from the request are set to null (if allowed in the
            /// database) unless partial is set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            /// <param name='businessUnit'>
            /// businessUnit
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfBusinessUnitResource> UpdateBusinessUnitUsingPUTAsync(this IIdentityApiClient operations, string businessUnitId, BusinessUnit businessUnit, bool? partial = default(bool?), bool? incremental = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBusinessUnitUsingPUTWithHttpMessagesAsync(businessUnitId, businessUnit, partial, incremental, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific business unit.
            /// </summary>
            /// <remarks>
            /// Deletes the specific business unit for the ID provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            public static void DeleteBusinessUnitUsingDELETE(this IIdentityApiClient operations, string businessUnitId)
            {
                operations.DeleteBusinessUnitUsingDELETEAsync(businessUnitId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific business unit.
            /// </summary>
            /// <remarks>
            /// Deletes the specific business unit for the ID provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnitId'>
            /// The business unit ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBusinessUnitUsingDELETEAsync(this IIdentityApiClient operations, string businessUnitId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBusinessUnitUsingDELETEWithHttpMessagesAsync(businessUnitId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of teams for an organization.
            /// </summary>
            /// <remarks>
            /// Gets a list of all the teams in the database for the specified
            /// organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PagedResourcesOfResourceOfTeamSummary GetTeamsUsingGET(this IIdentityApiClient operations)
            {
                return operations.GetTeamsUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of teams for an organization.
            /// </summary>
            /// <remarks>
            /// Gets a list of all the teams in the database for the specified
            /// organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesOfResourceOfTeamSummary> GetTeamsUsingGETAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamsUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a team.
            /// </summary>
            /// <remarks>
            /// Creates a team and returns the details and ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// team
            /// </param>
            public static ResourceOfTeamResource CreateTeamUsingPOST(this IIdentityApiClient operations, Team team)
            {
                return operations.CreateTeamUsingPOSTAsync(team).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a team.
            /// </summary>
            /// <remarks>
            /// Creates a team and returns the details and ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// team
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfTeamResource> CreateTeamUsingPOSTAsync(this IIdentityApiClient operations, Team team, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTeamUsingPOSTWithHttpMessagesAsync(team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single team.
            /// </summary>
            /// <remarks>
            /// Gets details of the specific team ID provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            public static ResourceOfTeamResource GetTeamUsingGET(this IIdentityApiClient operations, string teamId)
            {
                return operations.GetTeamUsingGETAsync(teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single team.
            /// </summary>
            /// <remarks>
            /// Gets details of the specific team ID provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfTeamResource> GetTeamUsingGETAsync(this IIdentityApiClient operations, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamUsingGETWithHttpMessagesAsync(teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a single team.
            /// </summary>
            /// <remarks>
            /// Updates a specific team and sets nulls to fields not in the request (if the
            /// database allows it) unless partial is set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            /// <param name='team'>
            /// team
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            public static ResourceOfTeamResource UpdateTeamUsingPUT(this IIdentityApiClient operations, string teamId, Team team, bool? partial = default(bool?), bool? incremental = default(bool?))
            {
                return operations.UpdateTeamUsingPUTAsync(teamId, team, partial, incremental).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a single team.
            /// </summary>
            /// <remarks>
            /// Updates a specific team and sets nulls to fields not in the request (if the
            /// database allows it) unless partial is set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            /// <param name='team'>
            /// team
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfTeamResource> UpdateTeamUsingPUTAsync(this IIdentityApiClient operations, string teamId, Team team, bool? partial = default(bool?), bool? incremental = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTeamUsingPUTWithHttpMessagesAsync(teamId, team, partial, incremental, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a single team.
            /// </summary>
            /// <remarks>
            /// Deletes a specific team provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            public static void DeleteTeamUsingDELETE(this IIdentityApiClient operations, string teamId)
            {
                operations.DeleteTeamUsingDELETEAsync(teamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a single team.
            /// </summary>
            /// <remarks>
            /// Deletes a specific team provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamId'>
            /// The team ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTeamUsingDELETEAsync(this IIdentityApiClient operations, string teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTeamUsingDELETEWithHttpMessagesAsync(teamId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of users for an organization.
            /// </summary>
            /// <remarks>
            /// Gets a list of the organization users for external users. Internal users
            /// can specify a specific organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// The usernames to filter out from the results.
            /// </param>
            /// <param name='orgName'>
            /// The organization name to search under.
            /// </param>
            /// <param name='orgId'>
            /// The organization ID to search under.
            /// </param>
            /// <param name='deleted'>
            /// Flag to indicate if deleted records are included in the results.
            /// </param>
            /// <param name='inactive'>
            /// Flag to indicate if inactive users are included in the results.
            /// </param>
            public static PagedResourcesOfResourceOfUserSummary GetUsersUsingGET(this IIdentityApiClient operations, IList<string> userName = default(IList<string>), string orgName = default(string), string orgId = default(string), bool? deleted = false, bool? inactive = false)
            {
                return operations.GetUsersUsingGETAsync(userName, orgName, orgId, deleted, inactive).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of users for an organization.
            /// </summary>
            /// <remarks>
            /// Gets a list of the organization users for external users. Internal users
            /// can specify a specific organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// The usernames to filter out from the results.
            /// </param>
            /// <param name='orgName'>
            /// The organization name to search under.
            /// </param>
            /// <param name='orgId'>
            /// The organization ID to search under.
            /// </param>
            /// <param name='deleted'>
            /// Flag to indicate if deleted records are included in the results.
            /// </param>
            /// <param name='inactive'>
            /// Flag to indicate if inactive users are included in the results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesOfResourceOfUserSummary> GetUsersUsingGETAsync(this IIdentityApiClient operations, IList<string> userName = default(IList<string>), string orgName = default(string), string orgId = default(string), bool? deleted = false, bool? inactive = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersUsingGETWithHttpMessagesAsync(userName, orgName, orgId, deleted, inactive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a user.
            /// </summary>
            /// <remarks>
            /// Creates a user and returns details with the ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='generateApiCreds'>
            /// Set to true to indicate that API credentials must be generated for the
            /// user.
            /// </param>
            public static ResourceOfUserResource CreateUser(this IIdentityApiClient operations, object generateApiCreds)
            {
                return operations.CreateUserAsync(generateApiCreds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a user.
            /// </summary>
            /// <remarks>
            /// Creates a user and returns details with the ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='generateApiCreds'>
            /// Set to true to indicate that API credentials must be generated for the
            /// user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfUserResource> CreateUserAsync(this IIdentityApiClient operations, object generateApiCreds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(generateApiCreds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of the current user.
            /// </summary>
            /// <remarks>
            /// Gets details of the current user using the details from the principal user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceOfUserResource GetUserUsingGET(this IIdentityApiClient operations)
            {
                return operations.GetUserUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of the current user.
            /// </summary>
            /// <remarks>
            /// Gets details of the current user using the details from the principal user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfUserResource> GetUserUsingGETAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the current user.
            /// </summary>
            /// <remarks>
            /// Updates the current user (from the principal user) and sets nulls to fields
            /// not in the request (if the database allows it) unless partial is set to
            /// true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// user
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            public static ResourceOfUserResource UpdateUserUsingPUT(this IIdentityApiClient operations, User user, bool? partial = default(bool?), bool? incremental = default(bool?))
            {
                return operations.UpdateUserUsingPUTAsync(user, partial, incremental).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the current user.
            /// </summary>
            /// <remarks>
            /// Updates the current user (from the principal user) and sets nulls to fields
            /// not in the request (if the database allows it) unless partial is set to
            /// true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// user
            /// </param>
            /// <param name='partial'>
            /// Flag to indicate if this is a partial update.
            /// </param>
            /// <param name='incremental'>
            /// Flag to indicate if this is an incremental update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOfUserResource> UpdateUserUsingPUTAsync(this IIdentityApiClient operations, User user, bool? partial = default(bool?), bool? incremental = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserUsingPUTWithHttpMessagesAsync(user, partial, incremental, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a single user.
            /// </summary>
            /// <remarks>
            /// Deletes a specific user provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            public static void DeleteUserUsingDELETE(this IIdentityApiClient operations, string userId)
            {
                operations.DeleteUserUsingDELETEAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a single user.
            /// </summary>
            /// <remarks>
            /// Deletes a specific user provided as a path variable.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserUsingDELETEAsync(this IIdentityApiClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserUsingDELETEWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of users for an organization by search and filter.
            /// </summary>
            /// <remarks>
            /// Get a list of users in an organization based on search terms and filters.
            /// Internal users can specify an organization name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiId'>
            /// Search for users by Veracode API ID.
            /// </param>
            /// <param name='loginEnabled'>
            /// Set to true to filter users by login enabled status: enabled or disabled
            /// </param>
            /// <param name='loginStatus'>
            /// Set to true to filter users by status of their user account: active,
            /// failed, locked, or never
            /// </param>
            /// <param name='orgId'>
            /// ID of an organization in which to search for users.
            /// </param>
            /// <param name='orgName'>
            /// Name of an organization in which to search for users. Available to internal
            /// users only.
            /// </param>
            /// <param name='roleId'>
            /// Filter users by ID of the assigned user role.
            /// </param>
            /// <param name='samlUser'>
            /// Set to true to filter by SAML users.
            /// </param>
            /// <param name='searchTerm'>
            /// Keyword to search for users using the username, first name, last name, and
            /// email address fields.
            /// </param>
            /// <param name='teamId'>
            /// Filter users by the ID of the team of which they are a member.
            /// </param>
            /// <param name='userType'>
            /// Filter users by user account type: api, for API service account, or user,
            /// for human user account.
            /// </param>
            public static PagedResourcesOfResourceOfUser GetUsersBySearchUsingGET(this IIdentityApiClient operations, string apiId = default(string), bool? loginEnabled = default(bool?), string loginStatus = default(string), string orgId = default(string), string orgName = default(string), string roleId = default(string), bool? samlUser = default(bool?), string searchTerm = default(string), string teamId = default(string), string userType = default(string))
            {
                return operations.GetUsersBySearchUsingGETAsync(apiId, loginEnabled, loginStatus, orgId, orgName, roleId, samlUser, searchTerm, teamId, userType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of users for an organization by search and filter.
            /// </summary>
            /// <remarks>
            /// Get a list of users in an organization based on search terms and filters.
            /// Internal users can specify an organization name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiId'>
            /// Search for users by Veracode API ID.
            /// </param>
            /// <param name='loginEnabled'>
            /// Set to true to filter users by login enabled status: enabled or disabled
            /// </param>
            /// <param name='loginStatus'>
            /// Set to true to filter users by status of their user account: active,
            /// failed, locked, or never
            /// </param>
            /// <param name='orgId'>
            /// ID of an organization in which to search for users.
            /// </param>
            /// <param name='orgName'>
            /// Name of an organization in which to search for users. Available to internal
            /// users only.
            /// </param>
            /// <param name='roleId'>
            /// Filter users by ID of the assigned user role.
            /// </param>
            /// <param name='samlUser'>
            /// Set to true to filter by SAML users.
            /// </param>
            /// <param name='searchTerm'>
            /// Keyword to search for users using the username, first name, last name, and
            /// email address fields.
            /// </param>
            /// <param name='teamId'>
            /// Filter users by the ID of the team of which they are a member.
            /// </param>
            /// <param name='userType'>
            /// Filter users by user account type: api, for API service account, or user,
            /// for human user account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesOfResourceOfUser> GetUsersBySearchUsingGETAsync(this IIdentityApiClient operations, string apiId = default(string), bool? loginEnabled = default(bool?), string loginStatus = default(string), string orgId = default(string), string orgName = default(string), string roleId = default(string), bool? samlUser = default(bool?), string searchTerm = default(string), string teamId = default(string), string userType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersBySearchUsingGETWithHttpMessagesAsync(apiId, loginEnabled, loginStatus, orgId, orgName, roleId, samlUser, searchTerm, teamId, userType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of roles for an organization.
            /// </summary>
            /// <remarks>
            /// Get a list of all user roles for an organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PagedResourcesOfResourceOfRole GetRolesUsingGET(this IIdentityApiClient operations)
            {
                return operations.GetRolesUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of roles for an organization.
            /// </summary>
            /// <remarks>
            /// Get a list of all user roles for an organization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourcesOfResourceOfRole> GetRolesUsingGETAsync(this IIdentityApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
