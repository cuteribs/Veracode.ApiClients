// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.FindingsApi.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// FindingStatus
    /// </summary>
    /// <remarks>
    /// The status of a finding with a specific context.
    /// </remarks>
    public partial class FindingStatus
    {
        /// <summary>
        /// Initializes a new instance of the FindingStatus class.
        /// </summary>
        public FindingStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FindingStatus class.
        /// </summary>
        /// <param name="firstFoundDate">Date when the finding was first found.
        /// The date/time format is per RFC3339 and ISO-8601, and the timezone
        /// is UTC. Example: 2019-04-12T23:20:50.52Z.</param>
        /// <param name="lastSeenDate">The date and time when the finding was
        /// last seen. The date/time format is per RFC3339 and ISO-8601, and
        /// the timezone is UTC. Example: 2019-04-12T23:20:50.52Z.</param>
        /// <param name="mitigationReviewStatus">Field indicating if the
        /// mitigation applied to the finding conforms to or deviates from
        /// industry standards.</param>
        /// <param name="newProperty">Use this flag to indicate if this is the
        /// first time this finding appeared in any context of the latest
        /// scan.</param>
        /// <param name="resolution">Resolution of the finding.</param>
        /// <param name="resolutionStatus">The resolution status of the
        /// finding.</param>
        /// <param name="status">Status of the finding: open or closed.</param>
        public FindingStatus(System.DateTime? firstFoundDate = default(System.DateTime?), System.DateTime? lastSeenDate = default(System.DateTime?), string mitigationReviewStatus = default(string), bool? newProperty = default(bool?), string resolution = default(string), string resolutionStatus = default(string), string status = default(string))
        {
            FirstFoundDate = firstFoundDate;
            LastSeenDate = lastSeenDate;
            MitigationReviewStatus = mitigationReviewStatus;
            NewProperty = newProperty;
            Resolution = resolution;
            ResolutionStatus = resolutionStatus;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date when the finding was first found. The date/time
        /// format is per RFC3339 and ISO-8601, and the timezone is UTC.
        /// Example: 2019-04-12T23:20:50.52Z.
        /// </summary>
        [JsonProperty(PropertyName = "first_found_date")]
        public System.DateTime? FirstFoundDate { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the finding was last seen. The
        /// date/time format is per RFC3339 and ISO-8601, and the timezone is
        /// UTC. Example: 2019-04-12T23:20:50.52Z.
        /// </summary>
        [JsonProperty(PropertyName = "last_seen_date")]
        public System.DateTime? LastSeenDate { get; set; }

        /// <summary>
        /// Gets or sets field indicating if the mitigation applied to the
        /// finding conforms to or deviates from industry standards.
        /// </summary>
        [JsonProperty(PropertyName = "mitigation_review_status")]
        public string MitigationReviewStatus { get; set; }

        /// <summary>
        /// Gets or sets use this flag to indicate if this is the first time
        /// this finding appeared in any context of the latest scan.
        /// </summary>
        [JsonProperty(PropertyName = "new")]
        public bool? NewProperty { get; set; }

        /// <summary>
        /// Gets or sets resolution of the finding.
        /// </summary>
        [JsonProperty(PropertyName = "resolution")]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or sets the resolution status of the finding.
        /// </summary>
        [JsonProperty(PropertyName = "resolution_status")]
        public string ResolutionStatus { get; set; }

        /// <summary>
        /// Gets or sets status of the finding: open or closed.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}
