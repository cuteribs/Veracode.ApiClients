// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.IdentityApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single user account.
    /// </summary>
    public partial class User
    {
        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        /// <param name="active">Flag indicating if this user record is
        /// currently active.</param>
        /// <param name="agreeTerms">Flag indicating if the user has accepted
        /// the Veracode terms and conditions.</param>
        /// <param name="allowMultipleSessions">Flag indicating if this user is
        /// allowed to have multiple active sessions.</param>
        /// <param name="allowedIpAddresses">Property to indicate the allowed
        /// IP addresses from which this user can log in.</param>
        /// <param name="deleted">Flag indicating if this user was soft
        /// deleted.</param>
        /// <param name="emailAddress">The email address of this user.</param>
        /// <param name="firstName">The first name of the user.</param>
        /// <param name="ipRestricted">Flag indicating whether this user can
        /// only log in from a specified set of IPs.</param>
        /// <param name="lastHost">The last host used by the user to log
        /// in.</param>
        /// <param name="lastLogin">The last login time for the user in date
        /// format.</param>
        /// <param name="lastName">The last name of the user.</param>
        /// <param name="loginAnswer">The security answer associated with this
        /// user account.</param>
        /// <param name="loginEnabled">Flag indicating if login is enabled for
        /// this user.</param>
        /// <param name="loginFailureCount">Property to indicate the count of
        /// failed logins this user has accumulated.</param>
        /// <param name="loginQuestion">The security question associated with
        /// this user account.</param>
        /// <param name="newPassword">The new password for this user account
        /// (used while updating the account).</param>
        /// <param name="oktaUserId">The user ID in Okta.</param>
        /// <param name="password">The password for this user account.</param>
        /// <param name="phone">The phone number of the user.</param>
        /// <param name="pinRequired">Flag indicating if this user must provide
        /// a PIN to log in.</param>
        /// <param name="samlSubject">Property for passing the SAML subject
        /// from the user.</param>
        /// <param name="samlUser">Flag indicating if this user is a SAML
        /// user.</param>
        /// <param name="showWelcome"> Flag to indicate showing the welcome
        /// message upon login.</param>
        /// <param name="title">The title of this user.</param>
        /// <param name="userId">The user ID in the Veracode Identity
        /// API.</param>
        /// <param name="userLegacyId">The user ID in the Veracode
        /// database.</param>
        /// <param name="userName">The username for this user.</param>
        public User(bool? active = default(bool?), bool? agreeTerms = default(bool?), bool? allowMultipleSessions = default(bool?), IList<string> allowedIpAddresses = default(IList<string>), ApiCredentials apiCredentials = default(ApiCredentials), bool? deleted = default(bool?), string emailAddress = default(string), string firstName = default(string), bool? ipRestricted = default(bool?), string lastHost = default(string), string lastLogin = default(string), string lastName = default(string), string loginAnswer = default(string), bool? loginEnabled = default(bool?), int? loginFailureCount = default(int?), string loginQuestion = default(string), string newPassword = default(string), string oktaUserId = default(string), Organization organization = default(Organization), string password = default(string), IList<Permission> permissions = default(IList<Permission>), string phone = default(string), bool? pinRequired = default(bool?), IList<Organization> proxyOrganizations = default(IList<Organization>), IList<Role> roles = default(IList<Role>), string samlSubject = default(string), bool? samlUser = default(bool?), bool? showWelcome = default(bool?), IList<UserTeam> teams = default(IList<UserTeam>), string title = default(string), string userId = default(string), int? userLegacyId = default(int?), string userName = default(string))
        {
            Active = active;
            AgreeTerms = agreeTerms;
            AllowMultipleSessions = allowMultipleSessions;
            AllowedIpAddresses = allowedIpAddresses;
            ApiCredentials = apiCredentials;
            Deleted = deleted;
            EmailAddress = emailAddress;
            FirstName = firstName;
            IpRestricted = ipRestricted;
            LastHost = lastHost;
            LastLogin = lastLogin;
            LastName = lastName;
            LoginAnswer = loginAnswer;
            LoginEnabled = loginEnabled;
            LoginFailureCount = loginFailureCount;
            LoginQuestion = loginQuestion;
            NewPassword = newPassword;
            OktaUserId = oktaUserId;
            Organization = organization;
            Password = password;
            Permissions = permissions;
            Phone = phone;
            PinRequired = pinRequired;
            ProxyOrganizations = proxyOrganizations;
            Roles = roles;
            SamlSubject = samlSubject;
            SamlUser = samlUser;
            ShowWelcome = showWelcome;
            Teams = teams;
            Title = title;
            UserId = userId;
            UserLegacyId = userLegacyId;
            UserName = userName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets flag indicating if this user record is currently
        /// active.
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if the user has accepted the Veracode
        /// terms and conditions.
        /// </summary>
        [JsonProperty(PropertyName = "agree_terms")]
        public bool? AgreeTerms { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this user is allowed to have
        /// multiple active sessions.
        /// </summary>
        [JsonProperty(PropertyName = "allow_multiple_sessions")]
        public bool? AllowMultipleSessions { get; set; }

        /// <summary>
        /// Gets or sets property to indicate the allowed IP addresses from
        /// which this user can log in.
        /// </summary>
        [JsonProperty(PropertyName = "allowed_ip_addresses")]
        public IList<string> AllowedIpAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "api_credentials")]
        public ApiCredentials ApiCredentials { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this user was soft deleted.
        /// </summary>
        [JsonProperty(PropertyName = "deleted")]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or sets the email address of this user.
        /// </summary>
        [JsonProperty(PropertyName = "email_address")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets the first name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets flag indicating whether this user can only log in from
        /// a specified set of IPs.
        /// </summary>
        [JsonProperty(PropertyName = "ip_restricted")]
        public bool? IpRestricted { get; set; }

        /// <summary>
        /// Gets or sets the last host used by the user to log in.
        /// </summary>
        [JsonProperty(PropertyName = "last_host")]
        public string LastHost { get; set; }

        /// <summary>
        /// Gets or sets the last login time for the user in date format.
        /// </summary>
        [JsonProperty(PropertyName = "last_login")]
        public string LastLogin { get; set; }

        /// <summary>
        /// Gets or sets the last name of the user.
        /// </summary>
        [JsonProperty(PropertyName = "last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the security answer associated with this user account.
        /// </summary>
        [JsonProperty(PropertyName = "login_answer")]
        public string LoginAnswer { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if login is enabled for this user.
        /// </summary>
        [JsonProperty(PropertyName = "login_enabled")]
        public bool? LoginEnabled { get; set; }

        /// <summary>
        /// Gets or sets property to indicate the count of failed logins this
        /// user has accumulated.
        /// </summary>
        [JsonProperty(PropertyName = "login_failure_count")]
        public int? LoginFailureCount { get; set; }

        /// <summary>
        /// Gets or sets the security question associated with this user
        /// account.
        /// </summary>
        [JsonProperty(PropertyName = "login_question")]
        public string LoginQuestion { get; set; }

        /// <summary>
        /// Gets or sets the new password for this user account (used while
        /// updating the account).
        /// </summary>
        [JsonProperty(PropertyName = "new_password")]
        public string NewPassword { get; set; }

        /// <summary>
        /// Gets or sets the user ID in Okta.
        /// </summary>
        [JsonProperty(PropertyName = "okta_user_id")]
        public string OktaUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "organization")]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or sets the password for this user account.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public IList<Permission> Permissions { get; set; }

        /// <summary>
        /// Gets or sets the phone number of the user.
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this user must provide a PIN to log
        /// in.
        /// </summary>
        [JsonProperty(PropertyName = "pin_required")]
        public bool? PinRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "proxy_organizations")]
        public IList<Organization> ProxyOrganizations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<Role> Roles { get; set; }

        /// <summary>
        /// Gets or sets property for passing the SAML subject from the user.
        /// </summary>
        [JsonProperty(PropertyName = "saml_subject")]
        public string SamlSubject { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this user is a SAML user.
        /// </summary>
        [JsonProperty(PropertyName = "saml_user")]
        public bool? SamlUser { get; set; }

        /// <summary>
        /// Gets or sets  Flag to indicate showing the welcome message upon
        /// login.
        /// </summary>
        [JsonProperty(PropertyName = "show_welcome")]
        public bool? ShowWelcome { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "teams")]
        public IList<UserTeam> Teams { get; set; }

        /// <summary>
        /// Gets or sets the title of this user.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the user ID in the Veracode Identity API.
        /// </summary>
        [JsonProperty(PropertyName = "user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the user ID in the Veracode database.
        /// </summary>
        [JsonProperty(PropertyName = "user_legacy_id")]
        public int? UserLegacyId { get; set; }

        /// <summary>
        /// Gets or sets the username for this user.
        /// </summary>
        [JsonProperty(PropertyName = "user_name")]
        public string UserName { get; set; }

    }
}
