// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.IdentityApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ResourceOfOrganization
    {
        /// <summary>
        /// Initializes a new instance of the ResourceOfOrganization class.
        /// </summary>
        public ResourceOfOrganization()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceOfOrganization class.
        /// </summary>
        /// <param name="apiCredentialTtl">The expiration time (integer) for
        /// the API credentials.</param>
        /// <param name="deleted">Flag indicating if this organization is soft
        /// deleted.</param>
        /// <param name="internalProperty">Flag indicating whether this
        /// organization is internal or external.</param>
        /// <param name="loginEnabled">Flag indicating if login is enabled for
        /// this organization.</param>
        /// <param name="oktaGroupId">The group ID assinged to this
        /// organization in Okta.</param>
        /// <param name="orgId">The organization ID in the Veracode Identity
        /// API.</param>
        /// <param name="orgLegacyId">The organization ID in the Veracode
        /// database.</param>
        /// <param name="orgName">The organization name.</param>
        /// <param name="orgStatus">Enum indicating the status of this
        /// organization. Possible values include: 'VALID',
        /// 'PENDING_APPROVAL'</param>
        /// <param name="orgType">Enum indicating the type of this
        /// organization. Possible values include: 'ROOT', 'OTHER', 'PARTNER',
        /// 'ENTERPRISE', 'VENDOR', 'TRIAL', 'FREE_TRIAL', 'OPENSOURCE'</param>
        /// <param name="salesLeadEmail">The email address of the Veracode
        /// account manager.</param>
        /// <param name="salesLeadName">The name of the Veracode account
        /// manager.</param>
        /// <param name="samlEnabled">Flag indicating if SAML is enabled for
        /// this organization.</param>
        /// <param name="solutionsArchitectEmail">The email address of the
        /// Veracode solutions architect.</param>
        /// <param name="solutionsArchitectName">The name of the Veracode
        /// solutions architect.</param>
        /// <param name="useOkta">Flag indicating if this organization is
        /// enabled for Okta.</param>
        /// <param name="vendorContactEmail">The email address of the vendor
        /// contact for this organization.</param>
        /// <param name="vendorContactJobTitle">The job title of the vendor
        /// contact for this organization.</param>
        /// <param name="vendorContactName">The name of the customer
        /// contact.</param>
        /// <param name="vendorDisplayName">The display name of the customer
        /// contact.</param>
        /// <param name="vendorType">Enum for the customer type. Possible
        /// values include: 'NOTSPEC', 'SERVICES_ALL', 'ENT_INTEGRATION',
        /// 'ISV', 'SERVICES_CLOUD', 'SERVICES_DEPLOYED', 'CONSULTING'</param>
        public ResourceOfOrganization(int? apiCredentialTtl = default(int?), bool? deleted = default(bool?), IList<Feature> features = default(IList<Feature>), bool? internalProperty = default(bool?), object _links = default(object), bool? loginEnabled = default(bool?), string oktaGroupId = default(string), string orgId = default(string), int? orgLegacyId = default(int?), string orgName = default(string), string orgStatus = default(string), string orgType = default(string), string salesLeadEmail = default(string), string salesLeadName = default(string), bool? samlEnabled = default(bool?), IList<OrganizationSku> skus = default(IList<OrganizationSku>), string solutionsArchitectEmail = default(string), string solutionsArchitectName = default(string), bool? useOkta = default(bool?), IList<User> users = default(IList<User>), string vendorContactEmail = default(string), string vendorContactJobTitle = default(string), string vendorContactName = default(string), string vendorDisplayName = default(string), string vendorType = default(string))
        {
            ApiCredentialTtl = apiCredentialTtl;
            Deleted = deleted;
            Features = features;
            InternalProperty = internalProperty;
            this._links = _links;
            LoginEnabled = loginEnabled;
            OktaGroupId = oktaGroupId;
            OrgId = orgId;
            OrgLegacyId = orgLegacyId;
            OrgName = orgName;
            OrgStatus = orgStatus;
            OrgType = orgType;
            SalesLeadEmail = salesLeadEmail;
            SalesLeadName = salesLeadName;
            SamlEnabled = samlEnabled;
            Skus = skus;
            SolutionsArchitectEmail = solutionsArchitectEmail;
            SolutionsArchitectName = solutionsArchitectName;
            UseOkta = useOkta;
            Users = users;
            VendorContactEmail = vendorContactEmail;
            VendorContactJobTitle = vendorContactJobTitle;
            VendorContactName = vendorContactName;
            VendorDisplayName = vendorDisplayName;
            VendorType = vendorType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the expiration time (integer) for the API credentials.
        /// </summary>
        [JsonProperty(PropertyName = "api_credential_ttl")]
        public int? ApiCredentialTtl { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this organization is soft deleted.
        /// </summary>
        [JsonProperty(PropertyName = "deleted")]
        public bool? Deleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "features")]
        public IList<Feature> Features { get; set; }

        /// <summary>
        /// Gets or sets flag indicating whether this organization is internal
        /// or external.
        /// </summary>
        [JsonProperty(PropertyName = "internal")]
        public bool? InternalProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "_links")]
        public object _links { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if login is enabled for this
        /// organization.
        /// </summary>
        [JsonProperty(PropertyName = "login_enabled")]
        public bool? LoginEnabled { get; set; }

        /// <summary>
        /// Gets or sets the group ID assinged to this organization in Okta.
        /// </summary>
        [JsonProperty(PropertyName = "okta_group_id")]
        public string OktaGroupId { get; set; }

        /// <summary>
        /// Gets or sets the organization ID in the Veracode Identity API.
        /// </summary>
        [JsonProperty(PropertyName = "org_id")]
        public string OrgId { get; set; }

        /// <summary>
        /// Gets or sets the organization ID in the Veracode database.
        /// </summary>
        [JsonProperty(PropertyName = "org_legacy_id")]
        public int? OrgLegacyId { get; set; }

        /// <summary>
        /// Gets or sets the organization name.
        /// </summary>
        [JsonProperty(PropertyName = "org_name")]
        public string OrgName { get; set; }

        /// <summary>
        /// Gets or sets enum indicating the status of this organization.
        /// Possible values include: 'VALID', 'PENDING_APPROVAL'
        /// </summary>
        [JsonProperty(PropertyName = "org_status")]
        public string OrgStatus { get; set; }

        /// <summary>
        /// Gets or sets enum indicating the type of this organization.
        /// Possible values include: 'ROOT', 'OTHER', 'PARTNER', 'ENTERPRISE',
        /// 'VENDOR', 'TRIAL', 'FREE_TRIAL', 'OPENSOURCE'
        /// </summary>
        [JsonProperty(PropertyName = "org_type")]
        public string OrgType { get; set; }

        /// <summary>
        /// Gets or sets the email address of the Veracode account manager.
        /// </summary>
        [JsonProperty(PropertyName = "sales_lead_email")]
        public string SalesLeadEmail { get; set; }

        /// <summary>
        /// Gets or sets the name of the Veracode account manager.
        /// </summary>
        [JsonProperty(PropertyName = "sales_lead_name")]
        public string SalesLeadName { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if SAML is enabled for this
        /// organization.
        /// </summary>
        [JsonProperty(PropertyName = "saml_enabled")]
        public bool? SamlEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "skus")]
        public IList<OrganizationSku> Skus { get; set; }

        /// <summary>
        /// Gets or sets the email address of the Veracode solutions architect.
        /// </summary>
        [JsonProperty(PropertyName = "solutions_architect_email")]
        public string SolutionsArchitectEmail { get; set; }

        /// <summary>
        /// Gets or sets the name of the Veracode solutions architect.
        /// </summary>
        [JsonProperty(PropertyName = "solutions_architect_name")]
        public string SolutionsArchitectName { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if this organization is enabled for
        /// Okta.
        /// </summary>
        [JsonProperty(PropertyName = "use_okta")]
        public bool? UseOkta { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<User> Users { get; set; }

        /// <summary>
        /// Gets or sets the email address of the vendor contact for this
        /// organization.
        /// </summary>
        [JsonProperty(PropertyName = "vendor_contact_email")]
        public string VendorContactEmail { get; set; }

        /// <summary>
        /// Gets or sets the job title of the vendor contact for this
        /// organization.
        /// </summary>
        [JsonProperty(PropertyName = "vendor_contact_job_title")]
        public string VendorContactJobTitle { get; set; }

        /// <summary>
        /// Gets or sets the name of the customer contact.
        /// </summary>
        [JsonProperty(PropertyName = "vendor_contact_name")]
        public string VendorContactName { get; set; }

        /// <summary>
        /// Gets or sets the display name of the customer contact.
        /// </summary>
        [JsonProperty(PropertyName = "vendor_display_name")]
        public string VendorDisplayName { get; set; }

        /// <summary>
        /// Gets or sets enum for the customer type. Possible values include:
        /// 'NOTSPEC', 'SERVICES_ALL', 'ENT_INTEGRATION', 'ISV',
        /// 'SERVICES_CLOUD', 'SERVICES_DEPLOYED', 'CONSULTING'
        /// </summary>
        [JsonProperty(PropertyName = "vendor_type")]
        public string VendorType { get; set; }

    }
}
