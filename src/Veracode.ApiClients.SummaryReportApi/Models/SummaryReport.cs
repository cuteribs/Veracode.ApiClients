// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.SummaryReportApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Details about the Summary Report.
    /// </summary>
    public partial class SummaryReport
    {
        /// <summary>
        /// Initializes a new instance of the SummaryReport class.
        /// </summary>
        public SummaryReport()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SummaryReport class.
        /// </summary>
        /// <param name="reportFormatVersion">Version of the format of this
        /// report.</param>
        /// <param name="accountId">ID of the Veracode account.</param>
        /// <param name="appName">Name of the scanned application.</param>
        /// <param name="appId">ID of the scanned application.</param>
        /// <param name="analysisId">ID for the scan.</param>
        /// <param name="staticAnalysisUnitId">Unit ID for a static
        /// analysis.</param>
        /// <param name="sandboxName">Name of the development sandbox. Not
        /// applicable for a policy scan.</param>
        /// <param name="sandboxId">ID of the development sandbox. Not
        /// applicable for a policy scan.</param>
        /// <param name="firstBuildSubmittedDate">Timestamp of the first time
        /// you submitted a build of this application to Veracode for
        /// scanning.</param>
        /// <param name="version">Version label for the application.</param>
        /// <param name="buildId">ID of the build for the application.</param>
        /// <param name="vendor">Name of the vendor that provided the
        /// application, if applicable.</param>
        /// <param name="submitter">Name of the account or user that created
        /// the build.</param>
        /// <param name="platform">Platform of the build for the
        /// application.</param>
        /// <param name="businessCriticality">Business criticality for the
        /// application.</param>
        /// <param name="generationDate">Timestamp when Veracode generated the
        /// report.</param>
        /// <param name="veracodeLevel">Security score for the application
        /// based on Veracode Levels. Values are VL1, VL2, VL3, VL4, or
        /// VL5</param>
        /// <param name="totalFlaws">Total number of discovered findings for
        /// the application.</param>
        /// <param name="flawsNotMitigated">Total number of discovered findings
        /// not marked as mitigated.</param>
        /// <param name="teams">Teams assigned to this application.</param>
        /// <param name="lifeCycleStage">Current life cycle stage for this
        /// application. For example, deployed or in development.</param>
        /// <param name="plannedDeploymentDate">Deployment date for the
        /// application, if specified.</param>
        /// <param name="lastUpdateTime">Last time this application was
        /// modified.</param>
        /// <param name="isLatestBuild">True if this report is for the most
        /// recent build of this application.</param>
        /// <param name="policyName">Name of the security policy assigned to
        /// this application.</param>
        /// <param name="policyVersion">Version number of the security policy
        /// assigned to the version of this application.</param>
        /// <param name="policyComplianceStatus">Current policy compliance
        /// status for this application. Values are Calculating, Did Not Pass,
        /// Conditional Pass, or Pass.</param>
        /// <param name="policyRulesStatus">Current policy rules compliance
        /// status for this application. Does not include scan frequency
        /// requirements and grace period time allowed to address rule
        /// violations. Values are Calculating, Did Not Pass, or Pass.</param>
        /// <param name="gracePeriodExpired">True if findings in the latest
        /// analyzed build of this application have existed for longer than the
        /// allowed grace period.</param>
        /// <param name="scanOverdue">True if the amount of time between the
        /// last analysis and the current time is greater than the scan
        /// frequency that your security policy requires.</param>
        /// <param name="anyTypeScanDue">Date to analyze a new build of this
        /// application for it to remain in compliance with the required scan
        /// frequency of the security policy.</param>
        /// <param name="businessOwner">First and last name of the party
        /// responsible for this application.</param>
        /// <param name="businessUnit">Department or group associated with this
        /// application.</param>
        /// <param name="tags">Comma-delimited list of tags associated with
        /// this application.</param>
        /// <param name="legacyScanEngine">For a static analysis, indicates
        /// whether the scan ran with a legacy engine or the same engine
        /// version as the previous scan of its type.</param>
        public SummaryReport(AnalysisType staticAnalysis = default(AnalysisType), AnalysisType dynamicAnalysis = default(AnalysisType), ManualAnalysisType manualAnalysis = default(ManualAnalysisType), IList<SeverityType> severity = default(IList<SeverityType>), FlawStatusType flawStatus = default(FlawStatusType), CustomFieldsType customFields = default(CustomFieldsType), SoftwareCompositionAnalysis softwareCompositionAnalysis = default(SoftwareCompositionAnalysis), string reportFormatVersion = default(string), double? accountId = default(double?), string appName = default(string), double? appId = default(double?), double? analysisId = default(double?), double? staticAnalysisUnitId = default(double?), string sandboxName = default(string), double? sandboxId = default(double?), string firstBuildSubmittedDate = default(string), string version = default(string), double? buildId = default(double?), string vendor = default(string), string submitter = default(string), string platform = default(string), long? businessCriticality = default(long?), string generationDate = default(string), string veracodeLevel = default(string), long? totalFlaws = default(long?), long? flawsNotMitigated = default(long?), string teams = default(string), string lifeCycleStage = default(string), string plannedDeploymentDate = default(string), string lastUpdateTime = default(string), bool? isLatestBuild = default(bool?), string policyName = default(string), long? policyVersion = default(long?), string policyComplianceStatus = default(string), string policyRulesStatus = default(string), bool? gracePeriodExpired = default(bool?), string scanOverdue = default(string), string anyTypeScanDue = default(string), string businessOwner = default(string), string businessUnit = default(string), string tags = default(string), bool? legacyScanEngine = default(bool?))
        {
            StaticAnalysis = staticAnalysis;
            DynamicAnalysis = dynamicAnalysis;
            ManualAnalysis = manualAnalysis;
            Severity = severity;
            FlawStatus = flawStatus;
            CustomFields = customFields;
            SoftwareCompositionAnalysis = softwareCompositionAnalysis;
            ReportFormatVersion = reportFormatVersion;
            AccountId = accountId;
            AppName = appName;
            AppId = appId;
            AnalysisId = analysisId;
            StaticAnalysisUnitId = staticAnalysisUnitId;
            SandboxName = sandboxName;
            SandboxId = sandboxId;
            FirstBuildSubmittedDate = firstBuildSubmittedDate;
            Version = version;
            BuildId = buildId;
            Vendor = vendor;
            Submitter = submitter;
            Platform = platform;
            BusinessCriticality = businessCriticality;
            GenerationDate = generationDate;
            VeracodeLevel = veracodeLevel;
            TotalFlaws = totalFlaws;
            FlawsNotMitigated = flawsNotMitigated;
            Teams = teams;
            LifeCycleStage = lifeCycleStage;
            PlannedDeploymentDate = plannedDeploymentDate;
            LastUpdateTime = lastUpdateTime;
            IsLatestBuild = isLatestBuild;
            PolicyName = policyName;
            PolicyVersion = policyVersion;
            PolicyComplianceStatus = policyComplianceStatus;
            PolicyRulesStatus = policyRulesStatus;
            GracePeriodExpired = gracePeriodExpired;
            ScanOverdue = scanOverdue;
            AnyTypeScanDue = anyTypeScanDue;
            BusinessOwner = businessOwner;
            BusinessUnit = businessUnit;
            Tags = tags;
            LegacyScanEngine = legacyScanEngine;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "static_analysis")]
        public AnalysisType StaticAnalysis { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dynamic_analysis")]
        public AnalysisType DynamicAnalysis { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manual_analysis")]
        public ManualAnalysisType ManualAnalysis { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public IList<SeverityType> Severity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "flaw_status")]
        public FlawStatusType FlawStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "custom_fields")]
        public CustomFieldsType CustomFields { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "software_composition_analysis")]
        public SoftwareCompositionAnalysis SoftwareCompositionAnalysis { get; set; }

        /// <summary>
        /// Gets or sets version of the format of this report.
        /// </summary>
        [JsonProperty(PropertyName = "report_format_version")]
        public string ReportFormatVersion { get; set; }

        /// <summary>
        /// Gets or sets ID of the Veracode account.
        /// </summary>
        [JsonProperty(PropertyName = "account_id")]
        public double? AccountId { get; set; }

        /// <summary>
        /// Gets or sets name of the scanned application.
        /// </summary>
        [JsonProperty(PropertyName = "app_name")]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets ID of the scanned application.
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public double? AppId { get; set; }

        /// <summary>
        /// Gets or sets ID for the scan.
        /// </summary>
        [JsonProperty(PropertyName = "analysis_id")]
        public double? AnalysisId { get; set; }

        /// <summary>
        /// Gets or sets unit ID for a static analysis.
        /// </summary>
        [JsonProperty(PropertyName = "static_analysis_unit_id")]
        public double? StaticAnalysisUnitId { get; set; }

        /// <summary>
        /// Gets or sets name of the development sandbox. Not applicable for a
        /// policy scan.
        /// </summary>
        [JsonProperty(PropertyName = "sandbox_name")]
        public string SandboxName { get; set; }

        /// <summary>
        /// Gets or sets ID of the development sandbox. Not applicable for a
        /// policy scan.
        /// </summary>
        [JsonProperty(PropertyName = "sandbox_id")]
        public double? SandboxId { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the first time you submitted a build of
        /// this application to Veracode for scanning.
        /// </summary>
        [JsonProperty(PropertyName = "first_build_submitted_date")]
        public string FirstBuildSubmittedDate { get; set; }

        /// <summary>
        /// Gets or sets version label for the application.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets ID of the build for the application.
        /// </summary>
        [JsonProperty(PropertyName = "build_id")]
        public double? BuildId { get; set; }

        /// <summary>
        /// Gets or sets name of the vendor that provided the application, if
        /// applicable.
        /// </summary>
        [JsonProperty(PropertyName = "vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets name of the account or user that created the build.
        /// </summary>
        [JsonProperty(PropertyName = "submitter")]
        public string Submitter { get; set; }

        /// <summary>
        /// Gets or sets platform of the build for the application.
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets business criticality for the application.
        /// </summary>
        [JsonProperty(PropertyName = "business_criticality")]
        public long? BusinessCriticality { get; set; }

        /// <summary>
        /// Gets or sets timestamp when Veracode generated the report.
        /// </summary>
        [JsonProperty(PropertyName = "generation_date")]
        public string GenerationDate { get; set; }

        /// <summary>
        /// Gets or sets security score for the application based on Veracode
        /// Levels. Values are VL1, VL2, VL3, VL4, or VL5
        /// </summary>
        [JsonProperty(PropertyName = "veracode_level")]
        public string VeracodeLevel { get; set; }

        /// <summary>
        /// Gets or sets total number of discovered findings for the
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "total_flaws")]
        public long? TotalFlaws { get; set; }

        /// <summary>
        /// Gets or sets total number of discovered findings not marked as
        /// mitigated.
        /// </summary>
        [JsonProperty(PropertyName = "flaws_not_mitigated")]
        public long? FlawsNotMitigated { get; set; }

        /// <summary>
        /// Gets or sets teams assigned to this application.
        /// </summary>
        [JsonProperty(PropertyName = "teams")]
        public string Teams { get; set; }

        /// <summary>
        /// Gets or sets current life cycle stage for this application. For
        /// example, deployed or in development.
        /// </summary>
        [JsonProperty(PropertyName = "life_cycle_stage")]
        public string LifeCycleStage { get; set; }

        /// <summary>
        /// Gets or sets deployment date for the application, if specified.
        /// </summary>
        [JsonProperty(PropertyName = "planned_deployment_date")]
        public string PlannedDeploymentDate { get; set; }

        /// <summary>
        /// Gets or sets last time this application was modified.
        /// </summary>
        [JsonProperty(PropertyName = "last_update_time")]
        public string LastUpdateTime { get; set; }

        /// <summary>
        /// Gets or sets true if this report is for the most recent build of
        /// this application.
        /// </summary>
        [JsonProperty(PropertyName = "is_latest_build")]
        public bool? IsLatestBuild { get; set; }

        /// <summary>
        /// Gets or sets name of the security policy assigned to this
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "policy_name")]
        public string PolicyName { get; set; }

        /// <summary>
        /// Gets or sets version number of the security policy assigned to the
        /// version of this application.
        /// </summary>
        [JsonProperty(PropertyName = "policy_version")]
        public long? PolicyVersion { get; set; }

        /// <summary>
        /// Gets or sets current policy compliance status for this application.
        /// Values are Calculating, Did Not Pass, Conditional Pass, or Pass.
        /// </summary>
        [JsonProperty(PropertyName = "policy_compliance_status")]
        public string PolicyComplianceStatus { get; set; }

        /// <summary>
        /// Gets or sets current policy rules compliance status for this
        /// application. Does not include scan frequency requirements and grace
        /// period time allowed to address rule violations. Values are
        /// Calculating, Did Not Pass, or Pass.
        /// </summary>
        [JsonProperty(PropertyName = "policy_rules_status")]
        public string PolicyRulesStatus { get; set; }

        /// <summary>
        /// Gets or sets true if findings in the latest analyzed build of this
        /// application have existed for longer than the allowed grace period.
        /// </summary>
        [JsonProperty(PropertyName = "grace_period_expired")]
        public bool? GracePeriodExpired { get; set; }

        /// <summary>
        /// Gets or sets true if the amount of time between the last analysis
        /// and the current time is greater than the scan frequency that your
        /// security policy requires.
        /// </summary>
        [JsonProperty(PropertyName = "scan_overdue")]
        public string ScanOverdue { get; set; }

        /// <summary>
        /// Gets or sets date to analyze a new build of this application for it
        /// to remain in compliance with the required scan frequency of the
        /// security policy.
        /// </summary>
        [JsonProperty(PropertyName = "any_type_scan_due")]
        public string AnyTypeScanDue { get; set; }

        /// <summary>
        /// Gets or sets first and last name of the party responsible for this
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "business_owner")]
        public string BusinessOwner { get; set; }

        /// <summary>
        /// Gets or sets department or group associated with this application.
        /// </summary>
        [JsonProperty(PropertyName = "business_unit")]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Gets or sets comma-delimited list of tags associated with this
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public string Tags { get; set; }

        /// <summary>
        /// Gets or sets for a static analysis, indicates whether the scan ran
        /// with a legacy engine or the same engine version as the previous
        /// scan of its type.
        /// </summary>
        [JsonProperty(PropertyName = "legacy_scan_engine")]
        public bool? LegacyScanEngine { get; set; }

    }
}
