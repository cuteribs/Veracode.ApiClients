// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.SCAAgentApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SBOM Object
    /// </summary>
    public partial class Sbom
    {
        /// <summary>
        /// Initializes a new instance of the Sbom class.
        /// </summary>
        public Sbom()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Sbom class.
        /// </summary>
        /// <param name="bomFormat">Specifies the format of the BOM. This helps
        /// to identify the file as CycloneDX since BOMs do not have a filename
        /// convention nor does JSON schema support namespaces. This value MUST
        /// be "CycloneDX". Possible values include: 'CycloneDX'</param>
        /// <param name="specVersion">The version of the CycloneDX
        /// specification a BOM conforms to (starting at version 1.2).</param>
        /// <param name="serialNumber">Every BOM generated should have a unique
        /// serial number, even if the contents of the BOM have not changed
        /// over time. If specified, the serial number MUST conform to
        /// RFC-4122. Veracode recommends using serial numbers.</param>
        /// <param name="version">Whenever an existing BOM is modified, either
        /// manually or through automated processes, the version of the BOM
        /// should be incremented by 1. When a system is presented with
        /// multiple BOMs with identical serial numbers, the system should use
        /// the most recent version of the BOM. The default version is
        /// '1'.</param>
        /// <param name="metadata">BOM Metadata</param>
        /// <param name="components">A list of software and hardware
        /// components.</param>
        /// <param name="dependencies">Provides the ability to document
        /// dependency relationships.</param>
        /// <param name="vulnerabilities">Vulnerabilities identified in
        /// components or services.</param>
        public Sbom(string bomFormat = default(string), string specVersion = default(string), string serialNumber = default(string), int? version = default(int?), Metadata metadata = default(Metadata), IList<Component> components = default(IList<Component>), IList<Dependency> dependencies = default(IList<Dependency>), IList<Vulnerability> vulnerabilities = default(IList<Vulnerability>))
        {
            BomFormat = bomFormat;
            SpecVersion = specVersion;
            SerialNumber = serialNumber;
            Version = version;
            Metadata = metadata;
            Components = components;
            Dependencies = dependencies;
            Vulnerabilities = vulnerabilities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the format of the BOM. This helps to
        /// identify the file as CycloneDX since BOMs do not have a filename
        /// convention nor does JSON schema support namespaces. This value MUST
        /// be "CycloneDX". Possible values include: 'CycloneDX'
        /// </summary>
        [JsonProperty(PropertyName = "bomFormat")]
        public string BomFormat { get; set; }

        /// <summary>
        /// Gets or sets the version of the CycloneDX specification a BOM
        /// conforms to (starting at version 1.2).
        /// </summary>
        [JsonProperty(PropertyName = "specVersion")]
        public string SpecVersion { get; set; }

        /// <summary>
        /// Gets or sets every BOM generated should have a unique serial
        /// number, even if the contents of the BOM have not changed over time.
        /// If specified, the serial number MUST conform to RFC-4122. Veracode
        /// recommends using serial numbers.
        /// </summary>
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets whenever an existing BOM is modified, either manually
        /// or through automated processes, the version of the BOM should be
        /// incremented by 1. When a system is presented with multiple BOMs
        /// with identical serial numbers, the system should use the most
        /// recent version of the BOM. The default version is '1'.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or sets BOM Metadata
        /// </summary>
        /// <remarks>
        /// Provides additional information about a BOM.
        /// </remarks>
        [JsonProperty(PropertyName = "metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>
        /// Gets or sets a list of software and hardware components.
        /// </summary>
        [JsonProperty(PropertyName = "components")]
        public IList<Component> Components { get; set; }

        /// <summary>
        /// Gets or sets provides the ability to document dependency
        /// relationships.
        /// </summary>
        [JsonProperty(PropertyName = "dependencies")]
        public IList<Dependency> Dependencies { get; set; }

        /// <summary>
        /// Gets or sets vulnerabilities identified in components or services.
        /// </summary>
        [JsonProperty(PropertyName = "vulnerabilities")]
        public IList<Vulnerability> Vulnerabilities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Metadata != null)
            {
                Metadata.Validate();
            }
            if (Components != null)
            {
                foreach (var element in Components)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Dependencies != null)
            {
                foreach (var element1 in Dependencies)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
