// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.ApplicationsApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApplicationsApiClient.
    /// </summary>
    public static partial class ApplicationsApiClientExtensions
    {
            /// <summary>
            /// getApplications
            /// </summary>
            /// <remarks>
            /// Returns a list of applications. Each applications has links to sandboxes,
            /// findings, and policies. The policy is associated with an application in the
            /// application profile and in other associations via parameters such as
            /// App_Team.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnit'>
            /// Business unit.
            /// </param>
            /// <param name='customFieldNames'>
            /// Custom field names to search.
            /// </param>
            /// <param name='customFieldValues'>
            /// Custom field values to search.
            /// </param>
            /// <param name='legacyId'>
            /// The unique identifier of the Veracode Platform application.
            /// </param>
            /// <param name='modifiedAfter'>
            /// Filter the results to return only those modified after this date. If there
            /// are multiple results for the same application, only the last modified
            /// result is returned. Format: yyyy-MM-dd
            /// </param>
            /// <param name='name'>
            /// Application name.
            /// </param>
            /// <param name='page'>
            /// Page number. Defaults to 0.
            /// </param>
            /// <param name='policy'>
            /// policy
            /// </param>
            /// <param name='policyCompliance'>
            /// The policy compliance status. Possible values include: 'DETERMINING',
            /// 'NOT_ASSESSED', 'DID_NOT_PASS', 'CONDITIONAL_PASS', 'VENDOR_REVIEW',
            /// 'PASSED'
            /// </param>
            /// <param name='policyComplianceCheckedAfter'>
            /// Filter the results to return only those with policy compliance checked
            /// after this date. Format: yyyy-MM-dd
            /// </param>
            /// <param name='policyGuid'>
            /// Policy GUID of the policy to change.
            /// </param>
            /// <param name='scanStatus'>
            /// The scan status of the application.
            /// </param>
            /// <param name='scanType'>
            /// The scan type of the application scans. Possible values include: 'STATIC',
            /// 'DYNAMIC', 'MANUAL', 'SCA'
            /// </param>
            /// <param name='size'>
            /// Page size, up to 500. The default is 50.
            /// </param>
            /// <param name='sortByCustomFieldName'>
            /// Custom field name on which to sort.
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='team'>
            /// Filter the results by team name.
            /// </param>
            public static PagedResourceOfApplication GetApplicationsUsingGET(this IApplicationsApiClient operations, string businessUnit = default(string), IList<string> customFieldNames = default(IList<string>), IList<string> customFieldValues = default(IList<string>), int? legacyId = default(int?), System.DateTime? modifiedAfter = default(System.DateTime?), string name = default(string), int? page = default(int?), string policy = default(string), string policyCompliance = default(string), System.DateTime? policyComplianceCheckedAfter = default(System.DateTime?), string policyGuid = default(string), IList<string> scanStatus = default(IList<string>), string scanType = default(string), int? size = default(int?), string sortByCustomFieldName = default(string), string tag = default(string), string team = default(string))
            {
                return operations.GetApplicationsUsingGETAsync(businessUnit, customFieldNames, customFieldValues, legacyId, modifiedAfter, name, page, policy, policyCompliance, policyComplianceCheckedAfter, policyGuid, scanStatus, scanType, size, sortByCustomFieldName, tag, team).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getApplications
            /// </summary>
            /// <remarks>
            /// Returns a list of applications. Each applications has links to sandboxes,
            /// findings, and policies. The policy is associated with an application in the
            /// application profile and in other associations via parameters such as
            /// App_Team.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='businessUnit'>
            /// Business unit.
            /// </param>
            /// <param name='customFieldNames'>
            /// Custom field names to search.
            /// </param>
            /// <param name='customFieldValues'>
            /// Custom field values to search.
            /// </param>
            /// <param name='legacyId'>
            /// The unique identifier of the Veracode Platform application.
            /// </param>
            /// <param name='modifiedAfter'>
            /// Filter the results to return only those modified after this date. If there
            /// are multiple results for the same application, only the last modified
            /// result is returned. Format: yyyy-MM-dd
            /// </param>
            /// <param name='name'>
            /// Application name.
            /// </param>
            /// <param name='page'>
            /// Page number. Defaults to 0.
            /// </param>
            /// <param name='policy'>
            /// policy
            /// </param>
            /// <param name='policyCompliance'>
            /// The policy compliance status. Possible values include: 'DETERMINING',
            /// 'NOT_ASSESSED', 'DID_NOT_PASS', 'CONDITIONAL_PASS', 'VENDOR_REVIEW',
            /// 'PASSED'
            /// </param>
            /// <param name='policyComplianceCheckedAfter'>
            /// Filter the results to return only those with policy compliance checked
            /// after this date. Format: yyyy-MM-dd
            /// </param>
            /// <param name='policyGuid'>
            /// Policy GUID of the policy to change.
            /// </param>
            /// <param name='scanStatus'>
            /// The scan status of the application.
            /// </param>
            /// <param name='scanType'>
            /// The scan type of the application scans. Possible values include: 'STATIC',
            /// 'DYNAMIC', 'MANUAL', 'SCA'
            /// </param>
            /// <param name='size'>
            /// Page size, up to 500. The default is 50.
            /// </param>
            /// <param name='sortByCustomFieldName'>
            /// Custom field name on which to sort.
            /// </param>
            /// <param name='tag'>
            /// tag
            /// </param>
            /// <param name='team'>
            /// Filter the results by team name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourceOfApplication> GetApplicationsUsingGETAsync(this IApplicationsApiClient operations, string businessUnit = default(string), IList<string> customFieldNames = default(IList<string>), IList<string> customFieldValues = default(IList<string>), int? legacyId = default(int?), System.DateTime? modifiedAfter = default(System.DateTime?), string name = default(string), int? page = default(int?), string policy = default(string), string policyCompliance = default(string), System.DateTime? policyComplianceCheckedAfter = default(System.DateTime?), string policyGuid = default(string), IList<string> scanStatus = default(IList<string>), string scanType = default(string), int? size = default(int?), string sortByCustomFieldName = default(string), string tag = default(string), string team = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationsUsingGETWithHttpMessagesAsync(businessUnit, customFieldNames, customFieldValues, legacyId, modifiedAfter, name, page, policy, policyCompliance, policyComplianceCheckedAfter, policyGuid, scanStatus, scanType, size, sortByCustomFieldName, tag, team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createApplication
            /// </summary>
            /// <remarks>
            /// Creates a new application and links it to associated resources such as
            /// policies and sandboxes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// The application object to be created.
            /// </param>
            public static Application CreateApplicationUsingPOST(this IApplicationsApiClient operations, Application application)
            {
                return operations.CreateApplicationUsingPOSTAsync(application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createApplication
            /// </summary>
            /// <remarks>
            /// Creates a new application and links it to associated resources such as
            /// policies and sandboxes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// The application object to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Application> CreateApplicationUsingPOSTAsync(this IApplicationsApiClient operations, Application application, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApplicationUsingPOSTWithHttpMessagesAsync(application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getApplication
            /// </summary>
            /// <remarks>
            /// Returns application information and links to associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            public static Application GetApplicationUsingGET(this IApplicationsApiClient operations, string applicationGuid)
            {
                return operations.GetApplicationUsingGETAsync(applicationGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getApplication
            /// </summary>
            /// <remarks>
            /// Returns application information and links to associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Application> GetApplicationUsingGETAsync(this IApplicationsApiClient operations, string applicationGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationUsingGETWithHttpMessagesAsync(applicationGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// The Application object being updated.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='method'>
            /// This method performs a partial update of any custom policy data.
            /// </param>
            /// <param name='policyGuid'>
            /// Policy GUID of the policy to be changed.
            /// </param>
            public static Application UpdateApplicationUsingPUT(this IApplicationsApiClient operations, Application application, string applicationGuid, string method = default(string), string policyGuid = default(string))
            {
                return operations.UpdateApplicationUsingPUTAsync(application, applicationGuid, method, policyGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// The Application object being updated.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='method'>
            /// This method performs a partial update of any custom policy data.
            /// </param>
            /// <param name='policyGuid'>
            /// Policy GUID of the policy to be changed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Application> UpdateApplicationUsingPUTAsync(this IApplicationsApiClient operations, Application application, string applicationGuid, string method = default(string), string policyGuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationUsingPUTWithHttpMessagesAsync(application, applicationGuid, method, policyGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteApplication
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            public static object DeleteApplicationUsingDELETE(this IApplicationsApiClient operations, string applicationGuid)
            {
                return operations.DeleteApplicationUsingDELETEAsync(applicationGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteApplication
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteApplicationUsingDELETEAsync(this IApplicationsApiClient operations, string applicationGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApplicationUsingDELETEWithHttpMessagesAsync(applicationGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getSandboxes
            /// </summary>
            /// <remarks>
            /// Sandboxes provide the ability to scan applications and measure the results
            /// against the policy rules without affecting the policy compliance of the
            /// entire application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='page'>
            /// Page number. Defaults to 0.
            /// </param>
            /// <param name='size'>
            /// Page size, up to 500. The default is 50.
            /// </param>
            public static PagedResourceOfSandbox GetSandboxesUsingGET(this IApplicationsApiClient operations, string applicationGuid, int? page = default(int?), int? size = default(int?))
            {
                return operations.GetSandboxesUsingGETAsync(applicationGuid, page, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getSandboxes
            /// </summary>
            /// <remarks>
            /// Sandboxes provide the ability to scan applications and measure the results
            /// against the policy rules without affecting the policy compliance of the
            /// entire application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='page'>
            /// Page number. Defaults to 0.
            /// </param>
            /// <param name='size'>
            /// Page size, up to 500. The default is 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResourceOfSandbox> GetSandboxesUsingGETAsync(this IApplicationsApiClient operations, string applicationGuid, int? page = default(int?), int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSandboxesUsingGETWithHttpMessagesAsync(applicationGuid, page, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createSandbox
            /// </summary>
            /// <remarks>
            /// Creates sandbox and returns the created sandbox details and links to
            /// associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='sandbox'>
            /// The sandbox object to create.
            /// </param>
            public static Sandbox CreateSandboxUsingPOST(this IApplicationsApiClient operations, string applicationGuid, Sandbox sandbox)
            {
                return operations.CreateSandboxUsingPOSTAsync(applicationGuid, sandbox).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createSandbox
            /// </summary>
            /// <remarks>
            /// Creates sandbox and returns the created sandbox details and links to
            /// associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='sandbox'>
            /// The sandbox object to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Sandbox> CreateSandboxUsingPOSTAsync(this IApplicationsApiClient operations, string applicationGuid, Sandbox sandbox, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSandboxUsingPOSTWithHttpMessagesAsync(applicationGuid, sandbox, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getSandbox
            /// </summary>
            /// <remarks>
            /// Returns sandbox information and links to associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='sandboxGuid'>
            /// The sandbox GUID
            /// </param>
            public static Sandbox GetSandboxUsingGET(this IApplicationsApiClient operations, string applicationGuid, string sandboxGuid)
            {
                return operations.GetSandboxUsingGETAsync(applicationGuid, sandboxGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getSandbox
            /// </summary>
            /// <remarks>
            /// Returns sandbox information and links to associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationGuid'>
            /// The application GUID.
            /// </param>
            /// <param name='sandboxGuid'>
            /// The sandbox GUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Sandbox> GetSandboxUsingGETAsync(this IApplicationsApiClient operations, string applicationGuid, string sandboxGuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSandboxUsingGETWithHttpMessagesAsync(applicationGuid, sandboxGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
