// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.ApplicationsApi
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Veracode Applications API Documentation
    ///
    /// Use one of the following base URLs depending on the region for your
    /// account:
    /// * https://api.veracode.com/ - Veracode US Region (default)
    /// * https://api.veracode.eu/ - Veracode European Region
    /// * https://api.veracode.us/ - Veracode US Federal Region
    /// </summary>
    public partial interface IApplicationsApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// getApplications
        /// </summary>
        /// <remarks>
        /// Returns a list of applications. Each applications has links to
        /// sandboxes, findings, and policies. The policy is associated with an
        /// application in the application profile and in other associations
        /// via parameters such as App_Team.
        /// </remarks>
        /// <param name='businessUnit'>
        /// Business unit.
        /// </param>
        /// <param name='customFieldNames'>
        /// Custom field names to search.
        /// </param>
        /// <param name='customFieldValues'>
        /// Custom field values to search.
        /// </param>
        /// <param name='legacyId'>
        /// The unique identifier of the Veracode Platform application.
        /// </param>
        /// <param name='modifiedAfter'>
        /// Filter the results to return only those modified after this date.
        /// If there are multiple results for the same application, only the
        /// last modified result is returned. Format: yyyy-MM-dd
        /// </param>
        /// <param name='name'>
        /// Application name.
        /// </param>
        /// <param name='page'>
        /// Page number. Defaults to 0.
        /// </param>
        /// <param name='policy'>
        /// policy
        /// </param>
        /// <param name='policyCompliance'>
        /// The policy compliance status. Possible values include:
        /// 'DETERMINING', 'NOT_ASSESSED', 'DID_NOT_PASS', 'CONDITIONAL_PASS',
        /// 'VENDOR_REVIEW', 'PASSED'
        /// </param>
        /// <param name='policyComplianceCheckedAfter'>
        /// Filter the results to return only those with policy compliance
        /// checked after this date. Format: yyyy-MM-dd
        /// </param>
        /// <param name='policyGuid'>
        /// Policy GUID of the policy to change.
        /// </param>
        /// <param name='scanStatus'>
        /// The scan status of the application.
        /// </param>
        /// <param name='scanType'>
        /// The scan type of the application scans. Possible values include:
        /// 'STATIC', 'DYNAMIC', 'MANUAL', 'SCA'
        /// </param>
        /// <param name='size'>
        /// Page size, up to 500. The default is 50.
        /// </param>
        /// <param name='sortByCustomFieldName'>
        /// Custom field name on which to sort.
        /// </param>
        /// <param name='tag'>
        /// tag
        /// </param>
        /// <param name='team'>
        /// Filter the results by team name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourceOfApplication>> GetApplicationsUsingGETWithHttpMessagesAsync(string businessUnit = default(string), IList<string> customFieldNames = default(IList<string>), IList<string> customFieldValues = default(IList<string>), int? legacyId = default(int?), System.DateTime? modifiedAfter = default(System.DateTime?), string name = default(string), int? page = default(int?), string policy = default(string), string policyCompliance = default(string), System.DateTime? policyComplianceCheckedAfter = default(System.DateTime?), string policyGuid = default(string), IList<string> scanStatus = default(IList<string>), string scanType = default(string), int? size = default(int?), string sortByCustomFieldName = default(string), string tag = default(string), string team = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// createApplication
        /// </summary>
        /// <remarks>
        /// Creates a new application and links it to associated resources such
        /// as policies and sandboxes.
        /// </remarks>
        /// <param name='application'>
        /// The application object to be created.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Application>> CreateApplicationUsingPOSTWithHttpMessagesAsync(Application application, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getApplication
        /// </summary>
        /// <remarks>
        /// Returns application information and links to associated resources.
        /// </remarks>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Application>> GetApplicationUsingGETWithHttpMessagesAsync(string applicationGuid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an application
        /// </summary>
        /// <param name='application'>
        /// The Application object being updated.
        /// </param>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='method'>
        /// This method performs a partial update of any custom policy data.
        /// </param>
        /// <param name='policyGuid'>
        /// Policy GUID of the policy to be changed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Application>> UpdateApplicationUsingPUTWithHttpMessagesAsync(Application application, string applicationGuid, string method = default(string), string policyGuid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deleteApplication
        /// </summary>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteApplicationUsingDELETEWithHttpMessagesAsync(string applicationGuid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getSandboxes
        /// </summary>
        /// <remarks>
        /// Sandboxes provide the ability to scan applications and measure the
        /// results against the policy rules without affecting the policy
        /// compliance of the entire application.
        /// </remarks>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='page'>
        /// Page number. Defaults to 0.
        /// </param>
        /// <param name='size'>
        /// Page size, up to 500. The default is 50.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PagedResourceOfSandbox>> GetSandboxesUsingGETWithHttpMessagesAsync(string applicationGuid, int? page = default(int?), int? size = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// createSandbox
        /// </summary>
        /// <remarks>
        /// Creates sandbox and returns the created sandbox details and links
        /// to associated resources.
        /// </remarks>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='sandbox'>
        /// The sandbox object to create.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Sandbox>> CreateSandboxUsingPOSTWithHttpMessagesAsync(string applicationGuid, Sandbox sandbox, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// getSandbox
        /// </summary>
        /// <remarks>
        /// Returns sandbox information and links to associated resources.
        /// </remarks>
        /// <param name='applicationGuid'>
        /// The application GUID.
        /// </param>
        /// <param name='sandboxGuid'>
        /// The sandbox GUID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Sandbox>> GetSandboxUsingGETWithHttpMessagesAsync(string applicationGuid, string sandboxGuid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
