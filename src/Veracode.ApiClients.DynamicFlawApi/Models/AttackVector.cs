// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.DynamicFlawApi.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AttackVector
    {
        /// <summary>
        /// Initializes a new instance of the AttackVector class.
        /// </summary>
        public AttackVector()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttackVector class.
        /// </summary>
        /// <param name="name">Name of the attack vector parameter.</param>
        /// <param name="type">Type of attack vector parameter. Possible values
        /// include: 'QUERY', 'HEADER', 'COOKIE', 'BODY', 'PATHPARAM'</param>
        /// <param name="originalValue">Original value of the attack
        /// vector.</param>
        /// <param name="injectedValue">Injected value of the attack vector,
        /// after the scan engine has modified it to detect a flaw.</param>
        public AttackVector(string name = default(string), string type = default(string), string originalValue = default(string), string injectedValue = default(string))
        {
            Name = name;
            Type = type;
            OriginalValue = originalValue;
            InjectedValue = injectedValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the attack vector parameter.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets type of attack vector parameter. Possible values include:
        /// 'QUERY', 'HEADER', 'COOKIE', 'BODY', 'PATHPARAM'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets original value of the attack vector.
        /// </summary>
        [JsonProperty(PropertyName = "original_value")]
        public string OriginalValue { get; private set; }

        /// <summary>
        /// Gets injected value of the attack vector, after the scan engine has
        /// modified it to detect a flaw.
        /// </summary>
        [JsonProperty(PropertyName = "injected_value")]
        public string InjectedValue { get; private set; }

    }
}
