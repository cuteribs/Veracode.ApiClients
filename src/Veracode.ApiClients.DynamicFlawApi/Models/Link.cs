// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracode.ApiClients.DynamicFlawApi.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Link
    {
        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        public Link()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        /// <param name="href">Endpoint for the current request.</param>
        /// <param name="name">Name of the link.</param>
        /// <param name="templated">True if the "href" property is a template.
        /// Otherwise, False.</param>
        public Link(string href, string name = default(string), bool? templated = default(bool?))
        {
            Href = href;
            Name = name;
            Templated = templated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets endpoint for the current request.
        /// </summary>
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }

        /// <summary>
        /// Gets or sets name of the link.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets true if the "href" property is a template. Otherwise,
        /// False.
        /// </summary>
        [JsonProperty(PropertyName = "templated")]
        public bool? Templated { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Href == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Href");
            }
        }
    }
}
